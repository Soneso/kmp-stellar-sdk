// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * struct SetOptionsOp
 * {
 *     AccountID* inflationDest; // sets the inflation destination
 * 
 *     uint32* clearFlags; // which flags to clear
 *     uint32* setFlags;   // which flags to set
 * 
 *     // account threshold manipulation
 *     uint32* masterWeight; // weight of the master account
 *     uint32* lowThreshold;
 *     uint32* medThreshold;
 *     uint32* highThreshold;
 * 
 *     string32* homeDomain; // sets the home domain
 * 
 *     // Add, update or remove a signer for the account
 *     // signer is deleted if the weight is 0
 *     Signer* signer;
 * };
 */
data class SetOptionsOpXdr(
  /** sets the inflation destination */
  val inflationDest: AccountIDXdr?,
  /** which flags to clear */
  val clearFlags: Uint32Xdr?,
  /** which flags to set */
  val setFlags: Uint32Xdr?,
  /**
   * account threshold manipulation
   * weight of the master account
   */
  val masterWeight: Uint32Xdr?,
  val lowThreshold: Uint32Xdr?,
  val medThreshold: Uint32Xdr?,
  val highThreshold: Uint32Xdr?,
  /** sets the home domain */
  val homeDomain: String32Xdr?,
  /**
   * Add, update or remove a signer for the account
   * signer is deleted if the weight is 0
   */
  val signer: SignerXdr?
) {
  companion object {

    fun decode(reader: XdrReader): SetOptionsOpXdr {
      val inflationDest = if (reader.readBoolean()) AccountIDXdr.decode(reader) else null
      val clearFlags = if (reader.readBoolean()) Uint32Xdr.decode(reader) else null
      val setFlags = if (reader.readBoolean()) Uint32Xdr.decode(reader) else null
      val masterWeight = if (reader.readBoolean()) Uint32Xdr.decode(reader) else null
      val lowThreshold = if (reader.readBoolean()) Uint32Xdr.decode(reader) else null
      val medThreshold = if (reader.readBoolean()) Uint32Xdr.decode(reader) else null
      val highThreshold = if (reader.readBoolean()) Uint32Xdr.decode(reader) else null
      val homeDomain = if (reader.readBoolean()) String32Xdr.decode(reader) else null
      val signer = if (reader.readBoolean()) SignerXdr.decode(reader) else null
      return SetOptionsOpXdr(inflationDest, clearFlags, setFlags, masterWeight, lowThreshold, medThreshold, highThreshold, homeDomain, signer)
    }
  }

  fun encode(writer: XdrWriter) {
    if (inflationDest != null) {
      writer.writeBoolean(true)
      inflationDest.encode(writer)
    } else {
      writer.writeBoolean(false)
    }
    if (clearFlags != null) {
      writer.writeBoolean(true)
      clearFlags.encode(writer)
    } else {
      writer.writeBoolean(false)
    }
    if (setFlags != null) {
      writer.writeBoolean(true)
      setFlags.encode(writer)
    } else {
      writer.writeBoolean(false)
    }
    if (masterWeight != null) {
      writer.writeBoolean(true)
      masterWeight.encode(writer)
    } else {
      writer.writeBoolean(false)
    }
    if (lowThreshold != null) {
      writer.writeBoolean(true)
      lowThreshold.encode(writer)
    } else {
      writer.writeBoolean(false)
    }
    if (medThreshold != null) {
      writer.writeBoolean(true)
      medThreshold.encode(writer)
    } else {
      writer.writeBoolean(false)
    }
    if (highThreshold != null) {
      writer.writeBoolean(true)
      highThreshold.encode(writer)
    } else {
      writer.writeBoolean(false)
    }
    if (homeDomain != null) {
      writer.writeBoolean(true)
      homeDomain.encode(writer)
    } else {
      writer.writeBoolean(false)
    }
    if (signer != null) {
      writer.writeBoolean(true)
      signer.encode(writer)
    } else {
      writer.writeBoolean(false)
    }
  }
}
