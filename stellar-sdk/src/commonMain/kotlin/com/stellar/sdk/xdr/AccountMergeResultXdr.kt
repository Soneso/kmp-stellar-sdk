// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union AccountMergeResult switch (AccountMergeResultCode code)
 * {
 * case ACCOUNT_MERGE_SUCCESS:
 *     int64 sourceAccountBalance; // how much got transferred from source account
 * case ACCOUNT_MERGE_MALFORMED:
 * case ACCOUNT_MERGE_NO_ACCOUNT:
 * case ACCOUNT_MERGE_IMMUTABLE_SET:
 * case ACCOUNT_MERGE_HAS_SUB_ENTRIES:
 * case ACCOUNT_MERGE_SEQNUM_TOO_FAR:
 * case ACCOUNT_MERGE_DEST_FULL:
 * case ACCOUNT_MERGE_IS_SPONSOR:
 *     void;
 * };
 */
sealed class AccountMergeResultXdr {
  abstract val discriminant: AccountMergeResultCodeXdr

  data class SourceAccountBalance(
    val value: Int64Xdr
  ) : AccountMergeResultXdr() {
    override val discriminant: AccountMergeResultCodeXdr = AccountMergeResultCodeXdr.ACCOUNT_MERGE_SUCCESS
  }

  data object Void : AccountMergeResultXdr() {
    override val discriminant: AccountMergeResultCodeXdr = AccountMergeResultCodeXdr.ACCOUNT_MERGE_MALFORMED
  }

  companion object {

    fun decode(reader: XdrReader): AccountMergeResultXdr {
      val discriminant = AccountMergeResultCodeXdr.decode(reader)
      return when (discriminant) {
        AccountMergeResultCodeXdr.ACCOUNT_MERGE_SUCCESS -> {
          val value = Int64Xdr.decode(reader)
          SourceAccountBalance(value)
        }
        AccountMergeResultCodeXdr.ACCOUNT_MERGE_MALFORMED -> Void
        AccountMergeResultCodeXdr.ACCOUNT_MERGE_NO_ACCOUNT -> Void
        AccountMergeResultCodeXdr.ACCOUNT_MERGE_IMMUTABLE_SET -> Void
        AccountMergeResultCodeXdr.ACCOUNT_MERGE_HAS_SUB_ENTRIES -> Void
        AccountMergeResultCodeXdr.ACCOUNT_MERGE_SEQNUM_TOO_FAR -> Void
        AccountMergeResultCodeXdr.ACCOUNT_MERGE_DEST_FULL -> Void
        AccountMergeResultCodeXdr.ACCOUNT_MERGE_IS_SPONSOR -> Void
        else -> throw IllegalArgumentException("Unknown AccountMergeResultXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is SourceAccountBalance -> {
        value.encode(writer)
      }
      is Void -> {}
    }
  }
}
