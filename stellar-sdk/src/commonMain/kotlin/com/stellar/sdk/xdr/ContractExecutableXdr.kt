// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union ContractExecutable switch (ContractExecutableType type)
 * {
 * case CONTRACT_EXECUTABLE_WASM:
 *     Hash wasm_hash;
 * case CONTRACT_EXECUTABLE_STELLAR_ASSET:
 *     void;
 * };
 */
sealed class ContractExecutableXdr {
  abstract val discriminant: ContractExecutableTypeXdr

  data class WasmHash(
    val value: HashXdr
  ) : ContractExecutableXdr() {
    override val discriminant: ContractExecutableTypeXdr = ContractExecutableTypeXdr.CONTRACT_EXECUTABLE_WASM
  }

  data object Void : ContractExecutableXdr() {
    override val discriminant: ContractExecutableTypeXdr = ContractExecutableTypeXdr.CONTRACT_EXECUTABLE_STELLAR_ASSET
  }

  companion object {

    fun decode(reader: XdrReader): ContractExecutableXdr {
      val discriminant = ContractExecutableTypeXdr.decode(reader)
      return when (discriminant) {
        ContractExecutableTypeXdr.CONTRACT_EXECUTABLE_WASM -> {
          val value = HashXdr.decode(reader)
          WasmHash(value)
        }
        ContractExecutableTypeXdr.CONTRACT_EXECUTABLE_STELLAR_ASSET -> Void
        else -> throw IllegalArgumentException("Unknown ContractExecutableXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is WasmHash -> {
        value.encode(writer)
      }
      is Void -> {}
    }
  }
}
