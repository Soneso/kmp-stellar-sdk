// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union InflationResult switch (InflationResultCode code)
 * {
 * case INFLATION_SUCCESS:
 *     InflationPayout payouts<>;
 * case INFLATION_NOT_TIME:
 *     void;
 * };
 */
sealed class InflationResultXdr {
  abstract val discriminant: InflationResultCodeXdr

  data class Payouts(
    val value: List<InflationPayoutXdr>
  ) : InflationResultXdr() {
    override val discriminant: InflationResultCodeXdr = InflationResultCodeXdr.INFLATION_SUCCESS
  }

  data object Void : InflationResultXdr() {
    override val discriminant: InflationResultCodeXdr = InflationResultCodeXdr.INFLATION_NOT_TIME
  }

  companion object {

    fun decode(reader: XdrReader): InflationResultXdr {
      val discriminant = InflationResultCodeXdr.decode(reader)
      return when (discriminant) {
        InflationResultCodeXdr.INFLATION_SUCCESS -> {
          val value = List(reader.readInt()) { InflationPayoutXdr.decode(reader) }
          Payouts(value)
        }
        InflationResultCodeXdr.INFLATION_NOT_TIME -> Void
        else -> throw IllegalArgumentException("Unknown InflationResultXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Payouts -> {
        writer.writeInt(value.size)
        value.forEach { item ->
          item.encode(writer)
        }
      }
      is Void -> {}
    }
  }
}
