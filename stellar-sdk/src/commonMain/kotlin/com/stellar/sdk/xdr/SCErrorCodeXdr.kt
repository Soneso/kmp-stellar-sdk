// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * enum SCErrorCode
 * {
 *     SCEC_ARITH_DOMAIN = 0,      // Some arithmetic was undefined (overflow, divide-by-zero).
 *     SCEC_INDEX_BOUNDS = 1,      // Something was indexed beyond its bounds.
 *     SCEC_INVALID_INPUT = 2,     // User provided some otherwise-bad data.
 *     SCEC_MISSING_VALUE = 3,     // Some value was required but not provided.
 *     SCEC_EXISTING_VALUE = 4,    // Some value was provided where not allowed.
 *     SCEC_EXCEEDED_LIMIT = 5,    // Some arbitrary limit -- gas or otherwise -- was hit.
 *     SCEC_INVALID_ACTION = 6,    // Data was valid but action requested was not.
 *     SCEC_INTERNAL_ERROR = 7,    // The host detected an error in its own logic.
 *     SCEC_UNEXPECTED_TYPE = 8,   // Some type wasn't as expected.
 *     SCEC_UNEXPECTED_SIZE = 9    // Something's size wasn't as expected.
 * };
 */
enum class SCErrorCodeXdr(val value: Int) {
  /** Some arithmetic was undefined (overflow, divide-by-zero). */
  SCEC_ARITH_DOMAIN(0),
  /** Something was indexed beyond its bounds. */
  SCEC_INDEX_BOUNDS(1),
  /** User provided some otherwise-bad data. */
  SCEC_INVALID_INPUT(2),
  /** Some value was required but not provided. */
  SCEC_MISSING_VALUE(3),
  /** Some value was provided where not allowed. */
  SCEC_EXISTING_VALUE(4),
  /** Some arbitrary limit -- gas or otherwise -- was hit. */
  SCEC_EXCEEDED_LIMIT(5),
  /** Data was valid but action requested was not. */
  SCEC_INVALID_ACTION(6),
  /** The host detected an error in its own logic. */
  SCEC_INTERNAL_ERROR(7),
  /** Some type wasn't as expected. */
  SCEC_UNEXPECTED_TYPE(8),
  /** Something's size wasn't as expected. */
  SCEC_UNEXPECTED_SIZE(9);

  companion object {

    fun decode(reader: XdrReader): SCErrorCodeXdr {
      val value = reader.readInt()
      return entries.find { it.value == value }
        ?: throw IllegalArgumentException("Unknown SCErrorCodeXdr value: $value")
    }
  }

  fun encode(writer: XdrWriter) {
    writer.writeInt(value)
  }
}
