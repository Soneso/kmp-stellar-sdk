// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union RevokeSponsorshipOp switch (RevokeSponsorshipType type)
 * {
 * case REVOKE_SPONSORSHIP_LEDGER_ENTRY:
 *     LedgerKey ledgerKey;
 * case REVOKE_SPONSORSHIP_SIGNER:
 *     struct
 *     {
 *         AccountID accountID;
 *         SignerKey signerKey;
 *     } signer;
 * };
 */
sealed class RevokeSponsorshipOpXdr {
  abstract val discriminant: RevokeSponsorshipTypeXdr

  data class LedgerKey(
    val value: LedgerKeyXdr
  ) : RevokeSponsorshipOpXdr() {
    override val discriminant: RevokeSponsorshipTypeXdr = RevokeSponsorshipTypeXdr.REVOKE_SPONSORSHIP_LEDGER_ENTRY
  }

  data class Signer(
    val value: RevokeSponsorshipOpSignerXdr
  ) : RevokeSponsorshipOpXdr() {
    override val discriminant: RevokeSponsorshipTypeXdr = RevokeSponsorshipTypeXdr.REVOKE_SPONSORSHIP_SIGNER
  }

  companion object {

    fun decode(reader: XdrReader): RevokeSponsorshipOpXdr {
      val discriminant = RevokeSponsorshipTypeXdr.decode(reader)
      return when (discriminant) {
        RevokeSponsorshipTypeXdr.REVOKE_SPONSORSHIP_LEDGER_ENTRY -> {
          val value = LedgerKeyXdr.decode(reader)
          LedgerKey(value)
        }
        RevokeSponsorshipTypeXdr.REVOKE_SPONSORSHIP_SIGNER -> {
          val value = RevokeSponsorshipOpSignerXdr.decode(reader)
          Signer(value)
        }
        else -> throw IllegalArgumentException("Unknown RevokeSponsorshipOpXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is LedgerKey -> {
        value.encode(writer)
      }
      is Signer -> {
        value.encode(writer)
      }
    }
  }
}
