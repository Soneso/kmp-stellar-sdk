// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union switch (StellarValueType v)
 *     {
 *     case STELLAR_VALUE_BASIC:
 *         void;
 *     case STELLAR_VALUE_SIGNED:
 *         LedgerCloseValueSignature lcValueSignature;
 *     }
 */
sealed class StellarValueExtXdr {
  abstract val discriminant: StellarValueTypeXdr

  data class LcValueSignature(
    val value: LedgerCloseValueSignatureXdr
  ) : StellarValueExtXdr() {
    override val discriminant: StellarValueTypeXdr = StellarValueTypeXdr.STELLAR_VALUE_SIGNED
  }

  data object Void : StellarValueExtXdr() {
    override val discriminant: StellarValueTypeXdr = StellarValueTypeXdr.STELLAR_VALUE_BASIC
  }

  companion object {

    fun decode(reader: XdrReader): StellarValueExtXdr {
      val discriminant = StellarValueTypeXdr.decode(reader)
      return when (discriminant) {
        StellarValueTypeXdr.STELLAR_VALUE_BASIC -> Void
        StellarValueTypeXdr.STELLAR_VALUE_SIGNED -> {
          val value = LedgerCloseValueSignatureXdr.decode(reader)
          LcValueSignature(value)
        }
        else -> throw IllegalArgumentException("Unknown StellarValueExtXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
      is LcValueSignature -> {
        value.encode(writer)
      }
    }
  }
}
