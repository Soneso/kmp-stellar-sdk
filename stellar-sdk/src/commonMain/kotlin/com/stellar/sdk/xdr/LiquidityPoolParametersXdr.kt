// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union LiquidityPoolParameters switch (LiquidityPoolType type)
 * {
 * case LIQUIDITY_POOL_CONSTANT_PRODUCT:
 *     LiquidityPoolConstantProductParameters constantProduct;
 * };
 */
sealed class LiquidityPoolParametersXdr {
  abstract val discriminant: LiquidityPoolTypeXdr

  data class ConstantProduct(
    val value: LiquidityPoolConstantProductParametersXdr
  ) : LiquidityPoolParametersXdr() {
    override val discriminant: LiquidityPoolTypeXdr = LiquidityPoolTypeXdr.LIQUIDITY_POOL_CONSTANT_PRODUCT
  }

  companion object {

    fun decode(reader: XdrReader): LiquidityPoolParametersXdr {
      val discriminant = LiquidityPoolTypeXdr.decode(reader)
      return when (discriminant) {
        LiquidityPoolTypeXdr.LIQUIDITY_POOL_CONSTANT_PRODUCT -> {
          val value = LiquidityPoolConstantProductParametersXdr.decode(reader)
          ConstantProduct(value)
        }
        else -> throw IllegalArgumentException("Unknown LiquidityPoolParametersXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is ConstantProduct -> {
        value.encode(writer)
      }
    }
  }
}
