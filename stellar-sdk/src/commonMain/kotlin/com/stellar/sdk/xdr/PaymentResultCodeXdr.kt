// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * enum PaymentResultCode
 * {
 *     // codes considered as "success" for the operation
 *     PAYMENT_SUCCESS = 0, // payment successfully completed
 * 
 *     // codes considered as "failure" for the operation
 *     PAYMENT_MALFORMED = -1,          // bad input
 *     PAYMENT_UNDERFUNDED = -2,        // not enough funds in source account
 *     PAYMENT_SRC_NO_TRUST = -3,       // no trust line on source account
 *     PAYMENT_SRC_NOT_AUTHORIZED = -4, // source not authorized to transfer
 *     PAYMENT_NO_DESTINATION = -5,     // destination account does not exist
 *     PAYMENT_NO_TRUST = -6,       // destination missing a trust line for asset
 *     PAYMENT_NOT_AUTHORIZED = -7, // destination not authorized to hold asset
 *     PAYMENT_LINE_FULL = -8,      // destination would go above their limit
 *     PAYMENT_NO_ISSUER = -9       // missing issuer on asset
 * };
 */
enum class PaymentResultCodeXdr(val value: Int) {
  /**
   * codes considered as "success" for the operation
   * payment successfully completed
   */
  PAYMENT_SUCCESS(0),
  /**
   * codes considered as "failure" for the operation
   * bad input
   */
  PAYMENT_MALFORMED(-1),
  /** not enough funds in source account */
  PAYMENT_UNDERFUNDED(-2),
  /** no trust line on source account */
  PAYMENT_SRC_NO_TRUST(-3),
  /** source not authorized to transfer */
  PAYMENT_SRC_NOT_AUTHORIZED(-4),
  /** destination account does not exist */
  PAYMENT_NO_DESTINATION(-5),
  /** destination missing a trust line for asset */
  PAYMENT_NO_TRUST(-6),
  /** destination not authorized to hold asset */
  PAYMENT_NOT_AUTHORIZED(-7),
  /** destination would go above their limit */
  PAYMENT_LINE_FULL(-8),
  /** missing issuer on asset */
  PAYMENT_NO_ISSUER(-9);

  companion object {

    fun decode(reader: XdrReader): PaymentResultCodeXdr {
      val value = reader.readInt()
      return entries.find { it.value == value }
        ?: throw IllegalArgumentException("Unknown PaymentResultCodeXdr value: $value")
    }
  }

  fun encode(writer: XdrWriter) {
    writer.writeInt(value)
  }
}
