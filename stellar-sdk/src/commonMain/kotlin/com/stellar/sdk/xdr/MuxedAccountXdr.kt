// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union MuxedAccount switch (CryptoKeyType type)
 * {
 * case KEY_TYPE_ED25519:
 *     uint256 ed25519;
 * case KEY_TYPE_MUXED_ED25519:
 *     struct
 *     {
 *         uint64 id;
 *         uint256 ed25519;
 *     } med25519;
 * };
 */
sealed class MuxedAccountXdr {
  abstract val discriminant: CryptoKeyTypeXdr

  data class Ed25519(
    val value: Uint256Xdr
  ) : MuxedAccountXdr() {
    override val discriminant: CryptoKeyTypeXdr = CryptoKeyTypeXdr.KEY_TYPE_ED25519
  }

  data class Med25519(
    val value: MuxedAccountMed25519Xdr
  ) : MuxedAccountXdr() {
    override val discriminant: CryptoKeyTypeXdr = CryptoKeyTypeXdr.KEY_TYPE_MUXED_ED25519
  }

  companion object {

    fun decode(reader: XdrReader): MuxedAccountXdr {
      val discriminant = CryptoKeyTypeXdr.decode(reader)
      return when (discriminant) {
        CryptoKeyTypeXdr.KEY_TYPE_ED25519 -> {
          val value = Uint256Xdr.decode(reader)
          Ed25519(value)
        }
        CryptoKeyTypeXdr.KEY_TYPE_MUXED_ED25519 -> {
          val value = MuxedAccountMed25519Xdr.decode(reader)
          Med25519(value)
        }
        else -> throw IllegalArgumentException("Unknown MuxedAccountXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Ed25519 -> {
        value.encode(writer)
      }
      is Med25519 -> {
        value.encode(writer)
      }
    }
  }
}
