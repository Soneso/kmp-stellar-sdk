// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union Asset switch (AssetType type)
 * {
 * case ASSET_TYPE_NATIVE: // Not credit
 *     void;
 * 
 * case ASSET_TYPE_CREDIT_ALPHANUM4:
 *     AlphaNum4 alphaNum4;
 * 
 * case ASSET_TYPE_CREDIT_ALPHANUM12:
 *     AlphaNum12 alphaNum12;
 * 
 *     // add other asset types here in the future
 * };
 */
sealed class AssetXdr {
  abstract val discriminant: AssetTypeXdr

  data class AlphaNum4(
    val value: AlphaNum4Xdr
  ) : AssetXdr() {
    override val discriminant: AssetTypeXdr = AssetTypeXdr.ASSET_TYPE_CREDIT_ALPHANUM4
  }

  data class AlphaNum12(
    val value: AlphaNum12Xdr
  ) : AssetXdr() {
    override val discriminant: AssetTypeXdr = AssetTypeXdr.ASSET_TYPE_CREDIT_ALPHANUM12
  }

  /** Not credit */
  data object Void : AssetXdr() {
    override val discriminant: AssetTypeXdr = AssetTypeXdr.ASSET_TYPE_NATIVE
  }

  companion object {

    fun decode(reader: XdrReader): AssetXdr {
      val discriminant = AssetTypeXdr.decode(reader)
      return when (discriminant) {
        AssetTypeXdr.ASSET_TYPE_NATIVE -> Void
        AssetTypeXdr.ASSET_TYPE_CREDIT_ALPHANUM4 -> {
          val value = AlphaNum4Xdr.decode(reader)
          AlphaNum4(value)
        }
        AssetTypeXdr.ASSET_TYPE_CREDIT_ALPHANUM12 -> {
          val value = AlphaNum12Xdr.decode(reader)
          AlphaNum12(value)
        }
        else -> throw IllegalArgumentException("Unknown AssetXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
      is AlphaNum4 -> {
        value.encode(writer)
      }
      is AlphaNum12 -> {
        value.encode(writer)
      }
    }
  }
}
