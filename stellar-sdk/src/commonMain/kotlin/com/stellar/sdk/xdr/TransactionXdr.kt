// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * struct Transaction
 * {
 *     // account used to run the transaction
 *     MuxedAccount sourceAccount;
 * 
 *     // the fee the sourceAccount will pay
 *     uint32 fee;
 * 
 *     // sequence number to consume in the account
 *     SequenceNumber seqNum;
 * 
 *     // validity conditions
 *     Preconditions cond;
 * 
 *     Memo memo;
 * 
 *     Operation operations<MAX_OPS_PER_TX>;
 * 
 *     union switch (int v)
 *     {
 *     case 0:
 *         void;
 *     case 1:
 *         SorobanTransactionData sorobanData;
 *     }
 *     ext;
 * };
 */
data class TransactionXdr(
  /** account used to run the transaction */
  val sourceAccount: MuxedAccountXdr,
  /** the fee the sourceAccount will pay */
  val fee: Uint32Xdr,
  /** sequence number to consume in the account */
  val seqNum: SequenceNumberXdr,
  /** validity conditions */
  val cond: PreconditionsXdr,
  val memo: MemoXdr,
  val operations: List<OperationXdr>,
  val ext: TransactionExtXdr
) {
  companion object {

    fun decode(reader: XdrReader): TransactionXdr {
      val sourceAccount = MuxedAccountXdr.decode(reader)
      val fee = Uint32Xdr.decode(reader)
      val seqNum = SequenceNumberXdr.decode(reader)
      val cond = PreconditionsXdr.decode(reader)
      val memo = MemoXdr.decode(reader)
      val operations = List(reader.readInt()) { OperationXdr.decode(reader) }
      val ext = TransactionExtXdr.decode(reader)
      return TransactionXdr(sourceAccount, fee, seqNum, cond, memo, operations, ext)
    }
  }

  fun encode(writer: XdrWriter) {
    sourceAccount.encode(writer)
    fee.encode(writer)
    seqNum.encode(writer)
    cond.encode(writer)
    memo.encode(writer)
    writer.writeInt(operations.size)
    operations.forEach { item ->
      item.encode(writer)
    }
    ext.encode(writer)
  }
}
