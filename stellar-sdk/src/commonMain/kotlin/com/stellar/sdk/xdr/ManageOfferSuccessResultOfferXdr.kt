// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union switch (ManageOfferEffect effect)
 *     {
 *     case MANAGE_OFFER_CREATED:
 *     case MANAGE_OFFER_UPDATED:
 *         OfferEntry offer;
 *     case MANAGE_OFFER_DELETED:
 *         void;
 *     }
 */
sealed class ManageOfferSuccessResultOfferXdr {
  abstract val discriminant: ManageOfferEffectXdr

  data class Offer(
    val value: OfferEntryXdr
  ) : ManageOfferSuccessResultOfferXdr() {
    override val discriminant: ManageOfferEffectXdr = ManageOfferEffectXdr.MANAGE_OFFER_CREATED
  }

  data object Void : ManageOfferSuccessResultOfferXdr() {
    override val discriminant: ManageOfferEffectXdr = ManageOfferEffectXdr.MANAGE_OFFER_DELETED
  }

  companion object {

    fun decode(reader: XdrReader): ManageOfferSuccessResultOfferXdr {
      val discriminant = ManageOfferEffectXdr.decode(reader)
      return when (discriminant) {
        ManageOfferEffectXdr.MANAGE_OFFER_CREATED -> {
          val value = OfferEntryXdr.decode(reader)
          Offer(value)
        }
        ManageOfferEffectXdr.MANAGE_OFFER_UPDATED -> {
          val value = OfferEntryXdr.decode(reader)
          Offer(value)
        }
        ManageOfferEffectXdr.MANAGE_OFFER_DELETED -> Void
        else -> throw IllegalArgumentException("Unknown ManageOfferSuccessResultOfferXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Offer -> {
        value.encode(writer)
      }
      is Void -> {}
    }
  }
}
