// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union HashIDPreimage switch (EnvelopeType type)
 * {
 * case ENVELOPE_TYPE_OP_ID:
 *     struct
 *     {
 *         AccountID sourceAccount;
 *         SequenceNumber seqNum;
 *         uint32 opNum;
 *     } operationID;
 * case ENVELOPE_TYPE_POOL_REVOKE_OP_ID:
 *     struct
 *     {
 *         AccountID sourceAccount;
 *         SequenceNumber seqNum;
 *         uint32 opNum;
 *         PoolID liquidityPoolID;
 *         Asset asset;
 *     } revokeID;
 * case ENVELOPE_TYPE_CONTRACT_ID:
 *     struct
 *     {
 *         Hash networkID;
 *         ContractIDPreimage contractIDPreimage;
 *     } contractID;
 * case ENVELOPE_TYPE_SOROBAN_AUTHORIZATION:
 *     struct
 *     {
 *         Hash networkID;
 *         int64 nonce;
 *         uint32 signatureExpirationLedger;
 *         SorobanAuthorizedInvocation invocation;
 *     } sorobanAuthorization;
 * };
 */
sealed class HashIDPreimageXdr {
  abstract val discriminant: EnvelopeTypeXdr

  data class OperationID(
    val value: HashIDPreimageOperationIDXdr
  ) : HashIDPreimageXdr() {
    override val discriminant: EnvelopeTypeXdr = EnvelopeTypeXdr.ENVELOPE_TYPE_OP_ID
  }

  data class RevokeID(
    val value: HashIDPreimageRevokeIDXdr
  ) : HashIDPreimageXdr() {
    override val discriminant: EnvelopeTypeXdr = EnvelopeTypeXdr.ENVELOPE_TYPE_POOL_REVOKE_OP_ID
  }

  data class ContractID(
    val value: HashIDPreimageContractIDXdr
  ) : HashIDPreimageXdr() {
    override val discriminant: EnvelopeTypeXdr = EnvelopeTypeXdr.ENVELOPE_TYPE_CONTRACT_ID
  }

  data class SorobanAuthorization(
    val value: HashIDPreimageSorobanAuthorizationXdr
  ) : HashIDPreimageXdr() {
    override val discriminant: EnvelopeTypeXdr = EnvelopeTypeXdr.ENVELOPE_TYPE_SOROBAN_AUTHORIZATION
  }

  companion object {

    fun decode(reader: XdrReader): HashIDPreimageXdr {
      val discriminant = EnvelopeTypeXdr.decode(reader)
      return when (discriminant) {
        EnvelopeTypeXdr.ENVELOPE_TYPE_OP_ID -> {
          val value = HashIDPreimageOperationIDXdr.decode(reader)
          OperationID(value)
        }
        EnvelopeTypeXdr.ENVELOPE_TYPE_POOL_REVOKE_OP_ID -> {
          val value = HashIDPreimageRevokeIDXdr.decode(reader)
          RevokeID(value)
        }
        EnvelopeTypeXdr.ENVELOPE_TYPE_CONTRACT_ID -> {
          val value = HashIDPreimageContractIDXdr.decode(reader)
          ContractID(value)
        }
        EnvelopeTypeXdr.ENVELOPE_TYPE_SOROBAN_AUTHORIZATION -> {
          val value = HashIDPreimageSorobanAuthorizationXdr.decode(reader)
          SorobanAuthorization(value)
        }
        else -> throw IllegalArgumentException("Unknown HashIDPreimageXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is OperationID -> {
        value.encode(writer)
      }
      is RevokeID -> {
        value.encode(writer)
      }
      is ContractID -> {
        value.encode(writer)
      }
      is SorobanAuthorization -> {
        value.encode(writer)
      }
    }
  }
}
