// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * struct PathPaymentStrictReceiveOp
 * {
 *     Asset sendAsset; // asset we pay with
 *     int64 sendMax;   // the maximum amount of sendAsset to
 *                      // send (excluding fees).
 *                      // The operation will fail if can't be met
 * 
 *     MuxedAccount destination; // recipient of the payment
 *     Asset destAsset;          // what they end up with
 *     int64 destAmount;         // amount they end up with
 * 
 *     Asset path<5>; // additional hops it must go through to get there
 * };
 */
data class PathPaymentStrictReceiveOpXdr(
  /** asset we pay with */
  val sendAsset: AssetXdr,
  /** the maximum amount of sendAsset to */
  val sendMax: Int64Xdr,
  /**
   * send (excluding fees).
   * The operation will fail if can't be met
   * recipient of the payment
   */
  val destination: MuxedAccountXdr,
  /** what they end up with */
  val destAsset: AssetXdr,
  /** amount they end up with */
  val destAmount: Int64Xdr,
  val path: List<AssetXdr>
) {
  companion object {

    fun decode(reader: XdrReader): PathPaymentStrictReceiveOpXdr {
      val sendAsset = AssetXdr.decode(reader)
      val sendMax = Int64Xdr.decode(reader)
      val destination = MuxedAccountXdr.decode(reader)
      val destAsset = AssetXdr.decode(reader)
      val destAmount = Int64Xdr.decode(reader)
      val path = List(reader.readInt()) { AssetXdr.decode(reader) }
      return PathPaymentStrictReceiveOpXdr(sendAsset, sendMax, destination, destAsset, destAmount, path)
    }
  }

  fun encode(writer: XdrWriter) {
    sendAsset.encode(writer)
    sendMax.encode(writer)
    destination.encode(writer)
    destAsset.encode(writer)
    destAmount.encode(writer)
    writer.writeInt(path.size)
    path.forEach { item ->
      item.encode(writer)
    }
  }
}
