// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union PersistedSCPState switch (int v)
 * {
 * case 0:
 * 	PersistedSCPStateV0 v0;
 * case 1:
 * 	PersistedSCPStateV1 v1;
 * };
 */
sealed class PersistedSCPStateXdr {
  abstract val discriminant: Int

  data class V0(
    val value: PersistedSCPStateV0Xdr
  ) : PersistedSCPStateXdr() {
    override val discriminant: Int = 0
  }

  data class V1(
    val value: PersistedSCPStateV1Xdr
  ) : PersistedSCPStateXdr() {
    override val discriminant: Int = 1
  }

  companion object {

    fun decode(reader: XdrReader): PersistedSCPStateXdr {
      val discriminant = reader.readInt()
      return when (discriminant) {
        0 -> {
          val value = PersistedSCPStateV0Xdr.decode(reader)
          V0(value)
        }
        1 -> {
          val value = PersistedSCPStateV1Xdr.decode(reader)
          V1(value)
        }
        else -> throw IllegalArgumentException("Unknown PersistedSCPStateXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    writer.writeInt(discriminant)
    when (this) {
      is V0 -> {
        value.encode(writer)
      }
      is V1 -> {
        value.encode(writer)
      }
    }
  }
}
