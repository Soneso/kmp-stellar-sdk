// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union HostFunction switch (HostFunctionType type)
 * {
 * case HOST_FUNCTION_TYPE_INVOKE_CONTRACT:
 *     InvokeContractArgs invokeContract;
 * case HOST_FUNCTION_TYPE_CREATE_CONTRACT:
 *     CreateContractArgs createContract;
 * case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM:
 *     opaque wasm<>;
 * case HOST_FUNCTION_TYPE_CREATE_CONTRACT_V2:
 *     CreateContractArgsV2 createContractV2;
 * };
 */
sealed class HostFunctionXdr {
  abstract val discriminant: HostFunctionTypeXdr

  data class InvokeContract(
    val value: InvokeContractArgsXdr
  ) : HostFunctionXdr() {
    override val discriminant: HostFunctionTypeXdr = HostFunctionTypeXdr.HOST_FUNCTION_TYPE_INVOKE_CONTRACT
  }

  data class CreateContract(
    val value: CreateContractArgsXdr
  ) : HostFunctionXdr() {
    override val discriminant: HostFunctionTypeXdr = HostFunctionTypeXdr.HOST_FUNCTION_TYPE_CREATE_CONTRACT
  }

  data class Wasm(
    val value: ByteArray
  ) : HostFunctionXdr() {
    override val discriminant: HostFunctionTypeXdr = HostFunctionTypeXdr.HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM
  }

  data class CreateContractV2(
    val value: CreateContractArgsV2Xdr
  ) : HostFunctionXdr() {
    override val discriminant: HostFunctionTypeXdr = HostFunctionTypeXdr.HOST_FUNCTION_TYPE_CREATE_CONTRACT_V2
  }

  companion object {

    fun decode(reader: XdrReader): HostFunctionXdr {
      val discriminant = HostFunctionTypeXdr.decode(reader)
      return when (discriminant) {
        HostFunctionTypeXdr.HOST_FUNCTION_TYPE_INVOKE_CONTRACT -> {
          val value = InvokeContractArgsXdr.decode(reader)
          InvokeContract(value)
        }
        HostFunctionTypeXdr.HOST_FUNCTION_TYPE_CREATE_CONTRACT -> {
          val value = CreateContractArgsXdr.decode(reader)
          CreateContract(value)
        }
        HostFunctionTypeXdr.HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM -> {
          val value = reader.readVariableOpaque()
          Wasm(value)
        }
        HostFunctionTypeXdr.HOST_FUNCTION_TYPE_CREATE_CONTRACT_V2 -> {
          val value = CreateContractArgsV2Xdr.decode(reader)
          CreateContractV2(value)
        }
        else -> throw IllegalArgumentException("Unknown HostFunctionXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is InvokeContract -> {
        value.encode(writer)
      }
      is CreateContract -> {
        value.encode(writer)
      }
      is Wasm -> {
        writer.writeVariableOpaque(value)
      }
      is CreateContractV2 -> {
        value.encode(writer)
      }
    }
  }
}
