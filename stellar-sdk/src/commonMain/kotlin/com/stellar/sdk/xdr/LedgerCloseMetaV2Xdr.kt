// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * struct LedgerCloseMetaV2
 * {
 *     LedgerCloseMetaExt ext;
 * 
 *     LedgerHeaderHistoryEntry ledgerHeader;
 * 
 *     GeneralizedTransactionSet txSet;
 * 
 *     // NB: transactions are sorted in apply order here
 *     // fees for all transactions are processed first
 *     // followed by applying transactions
 *     TransactionResultMetaV1 txProcessing<>;
 * 
 *     // upgrades are applied last
 *     UpgradeEntryMeta upgradesProcessing<>;
 * 
 *     // other misc information attached to the ledger close
 *     SCPHistoryEntry scpInfo<>;
 * 
 *     // Size in bytes of live Soroban state, to support downstream
 *     // systems calculating storage fees correctly.
 *     uint64 totalByteSizeOfLiveSorobanState;
 * 
 *     // TTL and data/code keys that have been evicted at this ledger.
 *     LedgerKey evictedKeys<>;
 * };
 */
data class LedgerCloseMetaV2Xdr(
  val ext: LedgerCloseMetaExtXdr,
  val ledgerHeader: LedgerHeaderHistoryEntryXdr,
  val txSet: GeneralizedTransactionSetXdr,
  val txProcessing: List<TransactionResultMetaV1Xdr>,
  val upgradesProcessing: List<UpgradeEntryMetaXdr>,
  val scpInfo: List<SCPHistoryEntryXdr>,
  /**
   * Size in bytes of live Soroban state, to support downstream
   * systems calculating storage fees correctly.
   */
  val totalByteSizeOfLiveSorobanState: Uint64Xdr,
  val evictedKeys: List<LedgerKeyXdr>
) {
  companion object {

    fun decode(reader: XdrReader): LedgerCloseMetaV2Xdr {
      val ext = LedgerCloseMetaExtXdr.decode(reader)
      val ledgerHeader = LedgerHeaderHistoryEntryXdr.decode(reader)
      val txSet = GeneralizedTransactionSetXdr.decode(reader)
      val txProcessing = List(reader.readInt()) { TransactionResultMetaV1Xdr.decode(reader) }
      val upgradesProcessing = List(reader.readInt()) { UpgradeEntryMetaXdr.decode(reader) }
      val scpInfo = List(reader.readInt()) { SCPHistoryEntryXdr.decode(reader) }
      val totalByteSizeOfLiveSorobanState = Uint64Xdr.decode(reader)
      val evictedKeys = List(reader.readInt()) { LedgerKeyXdr.decode(reader) }
      return LedgerCloseMetaV2Xdr(ext, ledgerHeader, txSet, txProcessing, upgradesProcessing, scpInfo, totalByteSizeOfLiveSorobanState, evictedKeys)
    }
  }

  fun encode(writer: XdrWriter) {
    ext.encode(writer)
    ledgerHeader.encode(writer)
    txSet.encode(writer)
    writer.writeInt(txProcessing.size)
    txProcessing.forEach { item ->
      item.encode(writer)
    }
    writer.writeInt(upgradesProcessing.size)
    upgradesProcessing.forEach { item ->
      item.encode(writer)
    }
    writer.writeInt(scpInfo.size)
    scpInfo.forEach { item ->
      item.encode(writer)
    }
    totalByteSizeOfLiveSorobanState.encode(writer)
    writer.writeInt(evictedKeys.size)
    evictedKeys.forEach { item ->
      item.encode(writer)
    }
  }
}
