// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union ClawbackClaimableBalanceResult switch (
 *     ClawbackClaimableBalanceResultCode code)
 * {
 * case CLAWBACK_CLAIMABLE_BALANCE_SUCCESS:
 *     void;
 * case CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST:
 * case CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER:
 * case CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED:
 *     void;
 * };
 */
sealed class ClawbackClaimableBalanceResultXdr {
  abstract val discriminant: ClawbackClaimableBalanceResultCodeXdr

  data class Void(
    override val discriminant: ClawbackClaimableBalanceResultCodeXdr
  ) : ClawbackClaimableBalanceResultXdr()

  companion object {

    fun decode(reader: XdrReader): ClawbackClaimableBalanceResultXdr {
      val discriminant = ClawbackClaimableBalanceResultCodeXdr.decode(reader)
      return when (discriminant) {
        ClawbackClaimableBalanceResultCodeXdr.CLAWBACK_CLAIMABLE_BALANCE_SUCCESS -> Void(discriminant)
        ClawbackClaimableBalanceResultCodeXdr.CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST -> Void(discriminant)
        ClawbackClaimableBalanceResultCodeXdr.CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER -> Void(discriminant)
        ClawbackClaimableBalanceResultCodeXdr.CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED -> Void(discriminant)
        else -> throw IllegalArgumentException("Unknown ClawbackClaimableBalanceResultXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
      is Void -> {}
    }
  }
}
