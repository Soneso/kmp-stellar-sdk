// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union ClaimPredicate switch (ClaimPredicateType type)
 * {
 * case CLAIM_PREDICATE_UNCONDITIONAL:
 *     void;
 * case CLAIM_PREDICATE_AND:
 *     ClaimPredicate andPredicates<2>;
 * case CLAIM_PREDICATE_OR:
 *     ClaimPredicate orPredicates<2>;
 * case CLAIM_PREDICATE_NOT:
 *     ClaimPredicate* notPredicate;
 * case CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME:
 *     int64 absBefore; // Predicate will be true if closeTime < absBefore
 * case CLAIM_PREDICATE_BEFORE_RELATIVE_TIME:
 *     int64 relBefore; // Seconds since closeTime of the ledger in which the
 *                      // ClaimableBalanceEntry was created
 * };
 */
sealed class ClaimPredicateXdr {
  abstract val discriminant: ClaimPredicateTypeXdr

  data class AndPredicates(
    val value: List<ClaimPredicateXdr>
  ) : ClaimPredicateXdr() {
    override val discriminant: ClaimPredicateTypeXdr = ClaimPredicateTypeXdr.CLAIM_PREDICATE_AND
  }

  data class OrPredicates(
    val value: List<ClaimPredicateXdr>
  ) : ClaimPredicateXdr() {
    override val discriminant: ClaimPredicateTypeXdr = ClaimPredicateTypeXdr.CLAIM_PREDICATE_OR
  }

  data class NotPredicate(
    val value: ClaimPredicateXdr?
  ) : ClaimPredicateXdr() {
    override val discriminant: ClaimPredicateTypeXdr = ClaimPredicateTypeXdr.CLAIM_PREDICATE_NOT
  }

  data class AbsBefore(
    val value: Int64Xdr
  ) : ClaimPredicateXdr() {
    override val discriminant: ClaimPredicateTypeXdr = ClaimPredicateTypeXdr.CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME
  }

  data class RelBefore(
    val value: Int64Xdr
  ) : ClaimPredicateXdr() {
    override val discriminant: ClaimPredicateTypeXdr = ClaimPredicateTypeXdr.CLAIM_PREDICATE_BEFORE_RELATIVE_TIME
  }

  data object Void : ClaimPredicateXdr() {
    override val discriminant: ClaimPredicateTypeXdr = ClaimPredicateTypeXdr.CLAIM_PREDICATE_UNCONDITIONAL
  }

  companion object {

    fun decode(reader: XdrReader): ClaimPredicateXdr {
      val discriminant = ClaimPredicateTypeXdr.decode(reader)
      return when (discriminant) {
        ClaimPredicateTypeXdr.CLAIM_PREDICATE_UNCONDITIONAL -> Void
        ClaimPredicateTypeXdr.CLAIM_PREDICATE_AND -> {
          val value = List(reader.readInt()) { ClaimPredicateXdr.decode(reader) }
          AndPredicates(value)
        }
        ClaimPredicateTypeXdr.CLAIM_PREDICATE_OR -> {
          val value = List(reader.readInt()) { ClaimPredicateXdr.decode(reader) }
          OrPredicates(value)
        }
        ClaimPredicateTypeXdr.CLAIM_PREDICATE_NOT -> {
          val value = if (reader.readBoolean()) ClaimPredicateXdr.decode(reader) else null
          NotPredicate(value)
        }
        ClaimPredicateTypeXdr.CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME -> {
          val value = Int64Xdr.decode(reader)
          AbsBefore(value)
        }
        ClaimPredicateTypeXdr.CLAIM_PREDICATE_BEFORE_RELATIVE_TIME -> {
          val value = Int64Xdr.decode(reader)
          RelBefore(value)
        }
        else -> throw IllegalArgumentException("Unknown ClaimPredicateXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
      is AndPredicates -> {
        writer.writeInt(value.size)
        value.forEach { item ->
          item.encode(writer)
        }
      }
      is OrPredicates -> {
        writer.writeInt(value.size)
        value.forEach { item ->
          item.encode(writer)
        }
      }
      is NotPredicate -> {
        if (value != null) {
          writer.writeBoolean(true)
          value.encode(writer)
        } else {
          writer.writeBoolean(false)
        }
      }
      is AbsBefore -> {
        value.encode(writer)
      }
      is RelBefore -> {
        value.encode(writer)
      }
    }
  }
}
