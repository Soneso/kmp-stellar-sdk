// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * struct
 *         {
 *             Hash quorumSetHash;       // D
 *             SCPBallot ballot;         // b
 *             SCPBallot* prepared;      // p
 *             SCPBallot* preparedPrime; // p'
 *             uint32 nC;                // c.n
 *             uint32 nH;                // h.n
 *         }
 */
data class SCPStatementPrepareXdr(
  /** D */
  val quorumSetHash: HashXdr,
  /** b */
  val ballot: SCPBallotXdr,
  /** p */
  val prepared: SCPBallotXdr?,
  /** p' */
  val preparedPrime: SCPBallotXdr?,
  /** c.n */
  val nC: Uint32Xdr,
  /** h.n */
  val nH: Uint32Xdr
) {
  companion object {

    fun decode(reader: XdrReader): SCPStatementPrepareXdr {
      val quorumSetHash = HashXdr.decode(reader)
      val ballot = SCPBallotXdr.decode(reader)
      val prepared = if (reader.readBoolean()) SCPBallotXdr.decode(reader) else null
      val preparedPrime = if (reader.readBoolean()) SCPBallotXdr.decode(reader) else null
      val nC = Uint32Xdr.decode(reader)
      val nH = Uint32Xdr.decode(reader)
      return SCPStatementPrepareXdr(quorumSetHash, ballot, prepared, preparedPrime, nC, nH)
    }
  }

  fun encode(writer: XdrWriter) {
    quorumSetHash.encode(writer)
    ballot.encode(writer)
    if (prepared != null) {
      writer.writeBoolean(true)
      prepared.encode(writer)
    } else {
      writer.writeBoolean(false)
    }
    if (preparedPrime != null) {
      writer.writeBoolean(true)
      preparedPrime.encode(writer)
    } else {
      writer.writeBoolean(false)
    }
    nC.encode(writer)
    nH.encode(writer)
  }
}
