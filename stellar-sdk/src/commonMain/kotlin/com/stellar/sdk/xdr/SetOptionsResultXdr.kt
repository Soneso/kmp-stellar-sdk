// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union SetOptionsResult switch (SetOptionsResultCode code)
 * {
 * case SET_OPTIONS_SUCCESS:
 *     void;
 * case SET_OPTIONS_LOW_RESERVE:
 * case SET_OPTIONS_TOO_MANY_SIGNERS:
 * case SET_OPTIONS_BAD_FLAGS:
 * case SET_OPTIONS_INVALID_INFLATION:
 * case SET_OPTIONS_CANT_CHANGE:
 * case SET_OPTIONS_UNKNOWN_FLAG:
 * case SET_OPTIONS_THRESHOLD_OUT_OF_RANGE:
 * case SET_OPTIONS_BAD_SIGNER:
 * case SET_OPTIONS_INVALID_HOME_DOMAIN:
 * case SET_OPTIONS_AUTH_REVOCABLE_REQUIRED:
 *     void;
 * };
 */
sealed class SetOptionsResultXdr {
  abstract val discriminant: SetOptionsResultCodeXdr

  data class Void(
    override val discriminant: SetOptionsResultCodeXdr
  ) : SetOptionsResultXdr()

  companion object {

    fun decode(reader: XdrReader): SetOptionsResultXdr {
      val discriminant = SetOptionsResultCodeXdr.decode(reader)
      return when (discriminant) {
        SetOptionsResultCodeXdr.SET_OPTIONS_SUCCESS -> Void(discriminant)
        SetOptionsResultCodeXdr.SET_OPTIONS_LOW_RESERVE -> Void(discriminant)
        SetOptionsResultCodeXdr.SET_OPTIONS_TOO_MANY_SIGNERS -> Void(discriminant)
        SetOptionsResultCodeXdr.SET_OPTIONS_BAD_FLAGS -> Void(discriminant)
        SetOptionsResultCodeXdr.SET_OPTIONS_INVALID_INFLATION -> Void(discriminant)
        SetOptionsResultCodeXdr.SET_OPTIONS_CANT_CHANGE -> Void(discriminant)
        SetOptionsResultCodeXdr.SET_OPTIONS_UNKNOWN_FLAG -> Void(discriminant)
        SetOptionsResultCodeXdr.SET_OPTIONS_THRESHOLD_OUT_OF_RANGE -> Void(discriminant)
        SetOptionsResultCodeXdr.SET_OPTIONS_BAD_SIGNER -> Void(discriminant)
        SetOptionsResultCodeXdr.SET_OPTIONS_INVALID_HOME_DOMAIN -> Void(discriminant)
        SetOptionsResultCodeXdr.SET_OPTIONS_AUTH_REVOCABLE_REQUIRED -> Void(discriminant)
        else -> throw IllegalArgumentException("Unknown SetOptionsResultXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
      is Void -> {}
    }
  }
}
