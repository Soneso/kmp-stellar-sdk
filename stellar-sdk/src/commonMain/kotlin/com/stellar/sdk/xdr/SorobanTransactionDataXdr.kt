// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * struct SorobanTransactionData
 * {
 *     union switch (int v)
 *     {
 *     case 0:
 *         void;
 *     case 1:
 *         SorobanResourcesExtV0 resourceExt;
 *     } ext;
 *     SorobanResources resources;
 *     // Amount of the transaction `fee` allocated to the Soroban resource fees.
 *     // The fraction of `resourceFee` corresponding to `resources` specified
 *     // above is *not* refundable (i.e. fees for instructions, ledger I/O), as
 *     // well as fees for the transaction size.
 *     // The remaining part of the fee is refundable and the charged value is
 *     // based on the actual consumption of refundable resources (events, ledger
 *     // rent bumps).
 *     // The `inclusionFee` used for prioritization of the transaction is defined
 *     // as `tx.fee - resourceFee`.
 *     int64 resourceFee;
 * };
 */
data class SorobanTransactionDataXdr(
  val ext: SorobanTransactionDataExtXdr,
  val resources: SorobanResourcesXdr,
  /**
   * Amount of the transaction `fee` allocated to the Soroban resource fees.
   * The fraction of `resourceFee` corresponding to `resources` specified
   * above is *not* refundable (i.e. fees for instructions, ledger I/O), as
   * well as fees for the transaction size.
   * The remaining part of the fee is refundable and the charged value is
   * based on the actual consumption of refundable resources (events, ledger
   * rent bumps).
   * The `inclusionFee` used for prioritization of the transaction is defined
   * as `tx.fee - resourceFee`.
   */
  val resourceFee: Int64Xdr
) {
  companion object {

    fun decode(reader: XdrReader): SorobanTransactionDataXdr {
      val ext = SorobanTransactionDataExtXdr.decode(reader)
      val resources = SorobanResourcesXdr.decode(reader)
      val resourceFee = Int64Xdr.decode(reader)
      return SorobanTransactionDataXdr(ext, resources, resourceFee)
    }
  }

  fun encode(writer: XdrWriter) {
    ext.encode(writer)
    resources.encode(writer)
    resourceFee.encode(writer)
  }
}
