// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union SCAddress switch (SCAddressType type)
 * {
 * case SC_ADDRESS_TYPE_ACCOUNT:
 *     AccountID accountId;
 * case SC_ADDRESS_TYPE_CONTRACT:
 *     ContractID contractId;
 * case SC_ADDRESS_TYPE_MUXED_ACCOUNT:
 *     MuxedEd25519Account muxedAccount;
 * case SC_ADDRESS_TYPE_CLAIMABLE_BALANCE:
 *     ClaimableBalanceID claimableBalanceId;
 * case SC_ADDRESS_TYPE_LIQUIDITY_POOL:
 *     PoolID liquidityPoolId;
 * };
 */
sealed class SCAddressXdr {
  abstract val discriminant: SCAddressTypeXdr

  data class AccountId(
    val value: AccountIDXdr
  ) : SCAddressXdr() {
    override val discriminant: SCAddressTypeXdr = SCAddressTypeXdr.SC_ADDRESS_TYPE_ACCOUNT
  }

  data class ContractId(
    val value: ContractIDXdr
  ) : SCAddressXdr() {
    override val discriminant: SCAddressTypeXdr = SCAddressTypeXdr.SC_ADDRESS_TYPE_CONTRACT
  }

  data class MuxedAccount(
    val value: MuxedEd25519AccountXdr
  ) : SCAddressXdr() {
    override val discriminant: SCAddressTypeXdr = SCAddressTypeXdr.SC_ADDRESS_TYPE_MUXED_ACCOUNT
  }

  data class ClaimableBalanceId(
    val value: ClaimableBalanceIDXdr
  ) : SCAddressXdr() {
    override val discriminant: SCAddressTypeXdr = SCAddressTypeXdr.SC_ADDRESS_TYPE_CLAIMABLE_BALANCE
  }

  data class LiquidityPoolId(
    val value: PoolIDXdr
  ) : SCAddressXdr() {
    override val discriminant: SCAddressTypeXdr = SCAddressTypeXdr.SC_ADDRESS_TYPE_LIQUIDITY_POOL
  }

  companion object {

    fun decode(reader: XdrReader): SCAddressXdr {
      val discriminant = SCAddressTypeXdr.decode(reader)
      return when (discriminant) {
        SCAddressTypeXdr.SC_ADDRESS_TYPE_ACCOUNT -> {
          val value = AccountIDXdr.decode(reader)
          AccountId(value)
        }
        SCAddressTypeXdr.SC_ADDRESS_TYPE_CONTRACT -> {
          val value = ContractIDXdr.decode(reader)
          ContractId(value)
        }
        SCAddressTypeXdr.SC_ADDRESS_TYPE_MUXED_ACCOUNT -> {
          val value = MuxedEd25519AccountXdr.decode(reader)
          MuxedAccount(value)
        }
        SCAddressTypeXdr.SC_ADDRESS_TYPE_CLAIMABLE_BALANCE -> {
          val value = ClaimableBalanceIDXdr.decode(reader)
          ClaimableBalanceId(value)
        }
        SCAddressTypeXdr.SC_ADDRESS_TYPE_LIQUIDITY_POOL -> {
          val value = PoolIDXdr.decode(reader)
          LiquidityPoolId(value)
        }
        else -> throw IllegalArgumentException("Unknown SCAddressXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is AccountId -> {
        value.encode(writer)
      }
      is ContractId -> {
        value.encode(writer)
      }
      is MuxedAccount -> {
        value.encode(writer)
      }
      is ClaimableBalanceId -> {
        value.encode(writer)
      }
      is LiquidityPoolId -> {
        value.encode(writer)
      }
    }
  }
}
