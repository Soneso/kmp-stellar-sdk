// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union switch (IPAddrType type)
 *     {
 *     case IPv4:
 *         opaque ipv4[4];
 *     case IPv6:
 *         opaque ipv6[16];
 *     }
 */
sealed class PeerAddressIpXdr {
  abstract val discriminant: IPAddrTypeXdr

  data class Ipv4(
    val value: ByteArray
  ) : PeerAddressIpXdr() {
    override val discriminant: IPAddrTypeXdr = IPAddrTypeXdr.IPv4
  }

  data class Ipv6(
    val value: ByteArray
  ) : PeerAddressIpXdr() {
    override val discriminant: IPAddrTypeXdr = IPAddrTypeXdr.IPv6
  }

  companion object {

    fun decode(reader: XdrReader): PeerAddressIpXdr {
      val discriminant = IPAddrTypeXdr.decode(reader)
      return when (discriminant) {
        IPAddrTypeXdr.IPv4 -> {
          val value = reader.readFixedOpaque(4)
          Ipv4(value)
        }
        IPAddrTypeXdr.IPv6 -> {
          val value = reader.readFixedOpaque(16)
          Ipv6(value)
        }
        else -> throw IllegalArgumentException("Unknown PeerAddressIpXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Ipv4 -> {
        writer.writeFixedOpaque(value, 4)
      }
      is Ipv6 -> {
        writer.writeFixedOpaque(value, 16)
      }
    }
  }
}
