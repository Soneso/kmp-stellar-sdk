// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * struct TransactionV0
 * {
 *     uint256 sourceAccountEd25519;
 *     uint32 fee;
 *     SequenceNumber seqNum;
 *     TimeBounds* timeBounds;
 *     Memo memo;
 *     Operation operations<MAX_OPS_PER_TX>;
 *     union switch (int v)
 *     {
 *     case 0:
 *         void;
 *     }
 *     ext;
 * };
 */
data class TransactionV0Xdr(
  val sourceAccountEd25519: Uint256Xdr,
  val fee: Uint32Xdr,
  val seqNum: SequenceNumberXdr,
  val timeBounds: TimeBoundsXdr?,
  val memo: MemoXdr,
  val operations: List<OperationXdr>,
  val ext: TransactionV0ExtXdr
) {
  companion object {

    fun decode(reader: XdrReader): TransactionV0Xdr {
      val sourceAccountEd25519 = Uint256Xdr.decode(reader)
      val fee = Uint32Xdr.decode(reader)
      val seqNum = SequenceNumberXdr.decode(reader)
      val timeBounds = if (reader.readBoolean()) TimeBoundsXdr.decode(reader) else null
      val memo = MemoXdr.decode(reader)
      val operations = List(reader.readInt()) { OperationXdr.decode(reader) }
      val ext = TransactionV0ExtXdr.decode(reader)
      return TransactionV0Xdr(sourceAccountEd25519, fee, seqNum, timeBounds, memo, operations, ext)
    }
  }

  fun encode(writer: XdrWriter) {
    sourceAccountEd25519.encode(writer)
    fee.encode(writer)
    seqNum.encode(writer)
    if (timeBounds != null) {
      writer.writeBoolean(true)
      timeBounds.encode(writer)
    } else {
      writer.writeBoolean(false)
    }
    memo.encode(writer)
    writer.writeInt(operations.size)
    operations.forEach { item ->
      item.encode(writer)
    }
    ext.encode(writer)
  }
}
