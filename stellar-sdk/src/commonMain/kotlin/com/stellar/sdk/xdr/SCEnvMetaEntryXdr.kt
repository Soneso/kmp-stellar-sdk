// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union SCEnvMetaEntry switch (SCEnvMetaKind kind)
 * {
 * case SC_ENV_META_KIND_INTERFACE_VERSION:
 *     struct {
 *         uint32 protocol;
 *         uint32 preRelease;
 *     } interfaceVersion;
 * };
 */
sealed class SCEnvMetaEntryXdr {
  abstract val discriminant: SCEnvMetaKindXdr

  data class InterfaceVersion(
    val value: SCEnvMetaEntryInterfaceVersionXdr
  ) : SCEnvMetaEntryXdr() {
    override val discriminant: SCEnvMetaKindXdr = SCEnvMetaKindXdr.SC_ENV_META_KIND_INTERFACE_VERSION
  }

  companion object {

    fun decode(reader: XdrReader): SCEnvMetaEntryXdr {
      val discriminant = SCEnvMetaKindXdr.decode(reader)
      return when (discriminant) {
        SCEnvMetaKindXdr.SC_ENV_META_KIND_INTERFACE_VERSION -> {
          val value = SCEnvMetaEntryInterfaceVersionXdr.decode(reader)
          InterfaceVersion(value)
        }
        else -> throw IllegalArgumentException("Unknown SCEnvMetaEntryXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is InterfaceVersion -> {
        value.encode(writer)
      }
    }
  }
}
