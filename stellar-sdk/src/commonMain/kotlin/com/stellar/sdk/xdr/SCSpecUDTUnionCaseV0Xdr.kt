// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union SCSpecUDTUnionCaseV0 switch (SCSpecUDTUnionCaseV0Kind kind)
 * {
 * case SC_SPEC_UDT_UNION_CASE_VOID_V0:
 *     SCSpecUDTUnionCaseVoidV0 voidCase;
 * case SC_SPEC_UDT_UNION_CASE_TUPLE_V0:
 *     SCSpecUDTUnionCaseTupleV0 tupleCase;
 * };
 */
sealed class SCSpecUDTUnionCaseV0Xdr {
  abstract val discriminant: SCSpecUDTUnionCaseV0KindXdr

  data class VoidCase(
    val value: SCSpecUDTUnionCaseVoidV0Xdr
  ) : SCSpecUDTUnionCaseV0Xdr() {
    override val discriminant: SCSpecUDTUnionCaseV0KindXdr = SCSpecUDTUnionCaseV0KindXdr.SC_SPEC_UDT_UNION_CASE_VOID_V0
  }

  data class TupleCase(
    val value: SCSpecUDTUnionCaseTupleV0Xdr
  ) : SCSpecUDTUnionCaseV0Xdr() {
    override val discriminant: SCSpecUDTUnionCaseV0KindXdr = SCSpecUDTUnionCaseV0KindXdr.SC_SPEC_UDT_UNION_CASE_TUPLE_V0
  }

  companion object {

    fun decode(reader: XdrReader): SCSpecUDTUnionCaseV0Xdr {
      val discriminant = SCSpecUDTUnionCaseV0KindXdr.decode(reader)
      return when (discriminant) {
        SCSpecUDTUnionCaseV0KindXdr.SC_SPEC_UDT_UNION_CASE_VOID_V0 -> {
          val value = SCSpecUDTUnionCaseVoidV0Xdr.decode(reader)
          VoidCase(value)
        }
        SCSpecUDTUnionCaseV0KindXdr.SC_SPEC_UDT_UNION_CASE_TUPLE_V0 -> {
          val value = SCSpecUDTUnionCaseTupleV0Xdr.decode(reader)
          TupleCase(value)
        }
        else -> throw IllegalArgumentException("Unknown SCSpecUDTUnionCaseV0Xdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is VoidCase -> {
        value.encode(writer)
      }
      is TupleCase -> {
        value.encode(writer)
      }
    }
  }
}
