// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union Memo switch (MemoType type)
 * {
 * case MEMO_NONE:
 *     void;
 * case MEMO_TEXT:
 *     string text<28>;
 * case MEMO_ID:
 *     uint64 id;
 * case MEMO_HASH:
 *     Hash hash; // the hash of what to pull from the content server
 * case MEMO_RETURN:
 *     Hash retHash; // the hash of the tx you are rejecting
 * };
 */
sealed class MemoXdr {
  abstract val discriminant: MemoTypeXdr

  data class Text(
    val value: String
  ) : MemoXdr() {
    override val discriminant: MemoTypeXdr = MemoTypeXdr.MEMO_TEXT
  }

  data class Id(
    val value: Uint64Xdr
  ) : MemoXdr() {
    override val discriminant: MemoTypeXdr = MemoTypeXdr.MEMO_ID
  }

  data class Hash(
    val value: HashXdr
  ) : MemoXdr() {
    override val discriminant: MemoTypeXdr = MemoTypeXdr.MEMO_HASH
  }

  data class RetHash(
    val value: HashXdr
  ) : MemoXdr() {
    override val discriminant: MemoTypeXdr = MemoTypeXdr.MEMO_RETURN
  }

  data object Void : MemoXdr() {
    override val discriminant: MemoTypeXdr = MemoTypeXdr.MEMO_NONE
  }

  companion object {

    fun decode(reader: XdrReader): MemoXdr {
      val discriminant = MemoTypeXdr.decode(reader)
      return when (discriminant) {
        MemoTypeXdr.MEMO_NONE -> Void
        MemoTypeXdr.MEMO_TEXT -> {
          val value = reader.readString()
          Text(value)
        }
        MemoTypeXdr.MEMO_ID -> {
          val value = Uint64Xdr.decode(reader)
          Id(value)
        }
        MemoTypeXdr.MEMO_HASH -> {
          val value = HashXdr.decode(reader)
          Hash(value)
        }
        MemoTypeXdr.MEMO_RETURN -> {
          val value = HashXdr.decode(reader)
          RetHash(value)
        }
        else -> throw IllegalArgumentException("Unknown MemoXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
      is Text -> {
        writer.writeString(value)
      }
      is Id -> {
        value.encode(writer)
      }
      is Hash -> {
        value.encode(writer)
      }
      is RetHash -> {
        value.encode(writer)
      }
    }
  }
}
