// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union ClaimClaimableBalanceResult switch (ClaimClaimableBalanceResultCode code)
 * {
 * case CLAIM_CLAIMABLE_BALANCE_SUCCESS:
 *     void;
 * case CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST:
 * case CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM:
 * case CLAIM_CLAIMABLE_BALANCE_LINE_FULL:
 * case CLAIM_CLAIMABLE_BALANCE_NO_TRUST:
 * case CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED:
 *     void;
 * };
 */
sealed class ClaimClaimableBalanceResultXdr {
  abstract val discriminant: ClaimClaimableBalanceResultCodeXdr

  data class Void(
    override val discriminant: ClaimClaimableBalanceResultCodeXdr
  ) : ClaimClaimableBalanceResultXdr()

  companion object {

    fun decode(reader: XdrReader): ClaimClaimableBalanceResultXdr {
      val discriminant = ClaimClaimableBalanceResultCodeXdr.decode(reader)
      return when (discriminant) {
        ClaimClaimableBalanceResultCodeXdr.CLAIM_CLAIMABLE_BALANCE_SUCCESS -> Void(discriminant)
        ClaimClaimableBalanceResultCodeXdr.CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST -> Void(discriminant)
        ClaimClaimableBalanceResultCodeXdr.CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM -> Void(discriminant)
        ClaimClaimableBalanceResultCodeXdr.CLAIM_CLAIMABLE_BALANCE_LINE_FULL -> Void(discriminant)
        ClaimClaimableBalanceResultCodeXdr.CLAIM_CLAIMABLE_BALANCE_NO_TRUST -> Void(discriminant)
        ClaimClaimableBalanceResultCodeXdr.CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED -> Void(discriminant)
        else -> throw IllegalArgumentException("Unknown ClaimClaimableBalanceResultXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
      is Void -> {}
    }
  }
}
