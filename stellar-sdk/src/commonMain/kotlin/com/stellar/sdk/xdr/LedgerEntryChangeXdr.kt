// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union LedgerEntryChange switch (LedgerEntryChangeType type)
 * {
 * case LEDGER_ENTRY_CREATED:
 *     LedgerEntry created;
 * case LEDGER_ENTRY_UPDATED:
 *     LedgerEntry updated;
 * case LEDGER_ENTRY_REMOVED:
 *     LedgerKey removed;
 * case LEDGER_ENTRY_STATE:
 *     LedgerEntry state;
 * case LEDGER_ENTRY_RESTORED:
 *     LedgerEntry restored;
 * };
 */
sealed class LedgerEntryChangeXdr {
  abstract val discriminant: LedgerEntryChangeTypeXdr

  data class Created(
    val value: LedgerEntryXdr
  ) : LedgerEntryChangeXdr() {
    override val discriminant: LedgerEntryChangeTypeXdr = LedgerEntryChangeTypeXdr.LEDGER_ENTRY_CREATED
  }

  data class Updated(
    val value: LedgerEntryXdr
  ) : LedgerEntryChangeXdr() {
    override val discriminant: LedgerEntryChangeTypeXdr = LedgerEntryChangeTypeXdr.LEDGER_ENTRY_UPDATED
  }

  data class Removed(
    val value: LedgerKeyXdr
  ) : LedgerEntryChangeXdr() {
    override val discriminant: LedgerEntryChangeTypeXdr = LedgerEntryChangeTypeXdr.LEDGER_ENTRY_REMOVED
  }

  data class State(
    val value: LedgerEntryXdr
  ) : LedgerEntryChangeXdr() {
    override val discriminant: LedgerEntryChangeTypeXdr = LedgerEntryChangeTypeXdr.LEDGER_ENTRY_STATE
  }

  data class Restored(
    val value: LedgerEntryXdr
  ) : LedgerEntryChangeXdr() {
    override val discriminant: LedgerEntryChangeTypeXdr = LedgerEntryChangeTypeXdr.LEDGER_ENTRY_RESTORED
  }

  companion object {

    fun decode(reader: XdrReader): LedgerEntryChangeXdr {
      val discriminant = LedgerEntryChangeTypeXdr.decode(reader)
      return when (discriminant) {
        LedgerEntryChangeTypeXdr.LEDGER_ENTRY_CREATED -> {
          val value = LedgerEntryXdr.decode(reader)
          Created(value)
        }
        LedgerEntryChangeTypeXdr.LEDGER_ENTRY_UPDATED -> {
          val value = LedgerEntryXdr.decode(reader)
          Updated(value)
        }
        LedgerEntryChangeTypeXdr.LEDGER_ENTRY_REMOVED -> {
          val value = LedgerKeyXdr.decode(reader)
          Removed(value)
        }
        LedgerEntryChangeTypeXdr.LEDGER_ENTRY_STATE -> {
          val value = LedgerEntryXdr.decode(reader)
          State(value)
        }
        LedgerEntryChangeTypeXdr.LEDGER_ENTRY_RESTORED -> {
          val value = LedgerEntryXdr.decode(reader)
          Restored(value)
        }
        else -> throw IllegalArgumentException("Unknown LedgerEntryChangeXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Created -> {
        value.encode(writer)
      }
      is Updated -> {
        value.encode(writer)
      }
      is Removed -> {
        value.encode(writer)
      }
      is State -> {
        value.encode(writer)
      }
      is Restored -> {
        value.encode(writer)
      }
    }
  }
}
