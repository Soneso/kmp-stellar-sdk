// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union ManageDataResult switch (ManageDataResultCode code)
 * {
 * case MANAGE_DATA_SUCCESS:
 *     void;
 * case MANAGE_DATA_NOT_SUPPORTED_YET:
 * case MANAGE_DATA_NAME_NOT_FOUND:
 * case MANAGE_DATA_LOW_RESERVE:
 * case MANAGE_DATA_INVALID_NAME:
 *     void;
 * };
 */
sealed class ManageDataResultXdr {
  abstract val discriminant: ManageDataResultCodeXdr

  data class Void(
    override val discriminant: ManageDataResultCodeXdr
  ) : ManageDataResultXdr()

  companion object {

    fun decode(reader: XdrReader): ManageDataResultXdr {
      val discriminant = ManageDataResultCodeXdr.decode(reader)
      return when (discriminant) {
        ManageDataResultCodeXdr.MANAGE_DATA_SUCCESS -> Void(discriminant)
        ManageDataResultCodeXdr.MANAGE_DATA_NOT_SUPPORTED_YET -> Void(discriminant)
        ManageDataResultCodeXdr.MANAGE_DATA_NAME_NOT_FOUND -> Void(discriminant)
        ManageDataResultCodeXdr.MANAGE_DATA_LOW_RESERVE -> Void(discriminant)
        ManageDataResultCodeXdr.MANAGE_DATA_INVALID_NAME -> Void(discriminant)
        else -> throw IllegalArgumentException("Unknown ManageDataResultXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
      is Void -> {}
    }
  }
}
