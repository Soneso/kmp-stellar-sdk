// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * struct Hello
 * {
 *     uint32 ledgerVersion;
 *     uint32 overlayVersion;
 *     uint32 overlayMinVersion;
 *     Hash networkID;
 *     string versionStr<100>;
 *     int listeningPort;
 *     NodeID peerID;
 *     AuthCert cert;
 *     uint256 nonce;
 * };
 */
data class HelloXdr(
  val ledgerVersion: Uint32Xdr,
  val overlayVersion: Uint32Xdr,
  val overlayMinVersion: Uint32Xdr,
  val networkId: HashXdr,
  val versionStr: String,
  val listeningPort: Int,
  val peerId: NodeIDXdr,
  val cert: AuthCertXdr,
  val nonce: Uint256Xdr
) {
  companion object {

    fun decode(reader: XdrReader): HelloXdr {
      val ledgerVersion = Uint32Xdr.decode(reader)
      val overlayVersion = Uint32Xdr.decode(reader)
      val overlayMinVersion = Uint32Xdr.decode(reader)
      val networkId = HashXdr.decode(reader)
      val versionStr = reader.readString()
      val listeningPort = reader.readInt()
      val peerId = NodeIDXdr.decode(reader)
      val cert = AuthCertXdr.decode(reader)
      val nonce = Uint256Xdr.decode(reader)
      return HelloXdr(ledgerVersion, overlayVersion, overlayMinVersion, networkId, versionStr, listeningPort, peerId, cert, nonce)
    }
  }

  fun encode(writer: XdrWriter) {
    ledgerVersion.encode(writer)
    overlayVersion.encode(writer)
    overlayMinVersion.encode(writer)
    networkId.encode(writer)
    writer.writeString(versionStr)
    writer.writeInt(listeningPort)
    peerId.encode(writer)
    cert.encode(writer)
    nonce.encode(writer)
  }
}
