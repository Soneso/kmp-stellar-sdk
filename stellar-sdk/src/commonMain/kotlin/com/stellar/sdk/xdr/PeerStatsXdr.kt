// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * struct PeerStats
 * {
 *     NodeID id;
 *     string versionStr<100>;
 *     uint64 messagesRead;
 *     uint64 messagesWritten;
 *     uint64 bytesRead;
 *     uint64 bytesWritten;
 *     uint64 secondsConnected;
 * 
 *     uint64 uniqueFloodBytesRecv;
 *     uint64 duplicateFloodBytesRecv;
 *     uint64 uniqueFetchBytesRecv;
 *     uint64 duplicateFetchBytesRecv;
 * 
 *     uint64 uniqueFloodMessageRecv;
 *     uint64 duplicateFloodMessageRecv;
 *     uint64 uniqueFetchMessageRecv;
 *     uint64 duplicateFetchMessageRecv;
 * };
 */
data class PeerStatsXdr(
  val id: NodeIDXdr,
  val versionStr: String,
  val messagesRead: Uint64Xdr,
  val messagesWritten: Uint64Xdr,
  val bytesRead: Uint64Xdr,
  val bytesWritten: Uint64Xdr,
  val secondsConnected: Uint64Xdr,
  val uniqueFloodBytesRecv: Uint64Xdr,
  val duplicateFloodBytesRecv: Uint64Xdr,
  val uniqueFetchBytesRecv: Uint64Xdr,
  val duplicateFetchBytesRecv: Uint64Xdr,
  val uniqueFloodMessageRecv: Uint64Xdr,
  val duplicateFloodMessageRecv: Uint64Xdr,
  val uniqueFetchMessageRecv: Uint64Xdr,
  val duplicateFetchMessageRecv: Uint64Xdr
) {
  companion object {

    fun decode(reader: XdrReader): PeerStatsXdr {
      val id = NodeIDXdr.decode(reader)
      val versionStr = reader.readString()
      val messagesRead = Uint64Xdr.decode(reader)
      val messagesWritten = Uint64Xdr.decode(reader)
      val bytesRead = Uint64Xdr.decode(reader)
      val bytesWritten = Uint64Xdr.decode(reader)
      val secondsConnected = Uint64Xdr.decode(reader)
      val uniqueFloodBytesRecv = Uint64Xdr.decode(reader)
      val duplicateFloodBytesRecv = Uint64Xdr.decode(reader)
      val uniqueFetchBytesRecv = Uint64Xdr.decode(reader)
      val duplicateFetchBytesRecv = Uint64Xdr.decode(reader)
      val uniqueFloodMessageRecv = Uint64Xdr.decode(reader)
      val duplicateFloodMessageRecv = Uint64Xdr.decode(reader)
      val uniqueFetchMessageRecv = Uint64Xdr.decode(reader)
      val duplicateFetchMessageRecv = Uint64Xdr.decode(reader)
      return PeerStatsXdr(id, versionStr, messagesRead, messagesWritten, bytesRead, bytesWritten, secondsConnected, uniqueFloodBytesRecv, duplicateFloodBytesRecv, uniqueFetchBytesRecv, duplicateFetchBytesRecv, uniqueFloodMessageRecv, duplicateFloodMessageRecv, uniqueFetchMessageRecv, duplicateFetchMessageRecv)
    }
  }

  fun encode(writer: XdrWriter) {
    id.encode(writer)
    writer.writeString(versionStr)
    messagesRead.encode(writer)
    messagesWritten.encode(writer)
    bytesRead.encode(writer)
    bytesWritten.encode(writer)
    secondsConnected.encode(writer)
    uniqueFloodBytesRecv.encode(writer)
    duplicateFloodBytesRecv.encode(writer)
    uniqueFetchBytesRecv.encode(writer)
    duplicateFetchBytesRecv.encode(writer)
    uniqueFloodMessageRecv.encode(writer)
    duplicateFloodMessageRecv.encode(writer)
    uniqueFetchMessageRecv.encode(writer)
    duplicateFetchMessageRecv.encode(writer)
  }
}
