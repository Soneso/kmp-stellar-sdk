// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union SorobanAuthorizedFunction switch (SorobanAuthorizedFunctionType type)
 * {
 * case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:
 *     InvokeContractArgs contractFn;
 * // This variant of auth payload for creating new contract instances
 * // doesn't allow specifying the constructor arguments, creating contracts
 * // with constructors that take arguments is only possible by authorizing
 * // `SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_V2_HOST_FN`
 * // (protocol 22+).
 * case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
 *     CreateContractArgs createContractHostFn;
 * // This variant of auth payload for creating new contract instances
 * // is only accepted in and after protocol 22. It allows authorizing the
 * // contract constructor arguments.
 * case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_V2_HOST_FN:
 *     CreateContractArgsV2 createContractV2HostFn;
 * };
 */
sealed class SorobanAuthorizedFunctionXdr {
  abstract val discriminant: SorobanAuthorizedFunctionTypeXdr

  data class ContractFn(
    val value: InvokeContractArgsXdr
  ) : SorobanAuthorizedFunctionXdr() {
    override val discriminant: SorobanAuthorizedFunctionTypeXdr = SorobanAuthorizedFunctionTypeXdr.SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN
  }

  /**
   * This variant of auth payload for creating new contract instances
   * doesn't allow specifying the constructor arguments, creating contracts
   * with constructors that take arguments is only possible by authorizing
   * `SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_V2_HOST_FN`
   * (protocol 22+).
   */
  data class CreateContractHostFn(
    val value: CreateContractArgsXdr
  ) : SorobanAuthorizedFunctionXdr() {
    override val discriminant: SorobanAuthorizedFunctionTypeXdr = SorobanAuthorizedFunctionTypeXdr.SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN
  }

  /**
   * This variant of auth payload for creating new contract instances
   * is only accepted in and after protocol 22. It allows authorizing the
   * contract constructor arguments.
   */
  data class CreateContractV2HostFn(
    val value: CreateContractArgsV2Xdr
  ) : SorobanAuthorizedFunctionXdr() {
    override val discriminant: SorobanAuthorizedFunctionTypeXdr = SorobanAuthorizedFunctionTypeXdr.SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_V2_HOST_FN
  }

  companion object {

    fun decode(reader: XdrReader): SorobanAuthorizedFunctionXdr {
      val discriminant = SorobanAuthorizedFunctionTypeXdr.decode(reader)
      return when (discriminant) {
        SorobanAuthorizedFunctionTypeXdr.SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN -> {
          val value = InvokeContractArgsXdr.decode(reader)
          ContractFn(value)
        }
        SorobanAuthorizedFunctionTypeXdr.SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN -> {
          val value = CreateContractArgsXdr.decode(reader)
          CreateContractHostFn(value)
        }
        SorobanAuthorizedFunctionTypeXdr.SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_V2_HOST_FN -> {
          val value = CreateContractArgsV2Xdr.decode(reader)
          CreateContractV2HostFn(value)
        }
        else -> throw IllegalArgumentException("Unknown SorobanAuthorizedFunctionXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is ContractFn -> {
        value.encode(writer)
      }
      is CreateContractHostFn -> {
        value.encode(writer)
      }
      is CreateContractV2HostFn -> {
        value.encode(writer)
      }
    }
  }
}
