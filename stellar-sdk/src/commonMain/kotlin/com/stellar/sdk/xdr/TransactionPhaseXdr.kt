// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union TransactionPhase switch (int v)
 * {
 * case 0:
 *     TxSetComponent v0Components<>;
 * case 1:
 *     ParallelTxsComponent parallelTxsComponent;
 * };
 */
sealed class TransactionPhaseXdr {
  abstract val discriminant: Int

  data class V0Components(
    val value: List<TxSetComponentXdr>
  ) : TransactionPhaseXdr() {
    override val discriminant: Int = 0
  }

  data class ParallelTxsComponent(
    val value: ParallelTxsComponentXdr
  ) : TransactionPhaseXdr() {
    override val discriminant: Int = 1
  }

  companion object {

    fun decode(reader: XdrReader): TransactionPhaseXdr {
      val discriminant = reader.readInt()
      return when (discriminant) {
        0 -> {
          val value = List(reader.readInt()) { TxSetComponentXdr.decode(reader) }
          V0Components(value)
        }
        1 -> {
          val value = ParallelTxsComponentXdr.decode(reader)
          ParallelTxsComponent(value)
        }
        else -> throw IllegalArgumentException("Unknown TransactionPhaseXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    writer.writeInt(discriminant)
    when (this) {
      is V0Components -> {
        writer.writeInt(value.size)
        value.forEach { item ->
          item.encode(writer)
        }
      }
      is ParallelTxsComponent -> {
        value.encode(writer)
      }
    }
  }
}
