// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * enum SCErrorType
 * {
 *     SCE_CONTRACT = 0,          // Contract-specific, user-defined codes.
 *     SCE_WASM_VM = 1,           // Errors while interpreting WASM bytecode.
 *     SCE_CONTEXT = 2,           // Errors in the contract's host context.
 *     SCE_STORAGE = 3,           // Errors accessing host storage.
 *     SCE_OBJECT = 4,            // Errors working with host objects.
 *     SCE_CRYPTO = 5,            // Errors in cryptographic operations.
 *     SCE_EVENTS = 6,            // Errors while emitting events.
 *     SCE_BUDGET = 7,            // Errors relating to budget limits.
 *     SCE_VALUE = 8,             // Errors working with host values or SCVals.
 *     SCE_AUTH = 9               // Errors from the authentication subsystem.
 * };
 */
enum class SCErrorTypeXdr(val value: Int) {
  /** Contract-specific, user-defined codes. */
  SCE_CONTRACT(0),
  /** Errors while interpreting WASM bytecode. */
  SCE_WASM_VM(1),
  /** Errors in the contract's host context. */
  SCE_CONTEXT(2),
  /** Errors accessing host storage. */
  SCE_STORAGE(3),
  /** Errors working with host objects. */
  SCE_OBJECT(4),
  /** Errors in cryptographic operations. */
  SCE_CRYPTO(5),
  /** Errors while emitting events. */
  SCE_EVENTS(6),
  /** Errors relating to budget limits. */
  SCE_BUDGET(7),
  /** Errors working with host values or SCVals. */
  SCE_VALUE(8),
  /** Errors from the authentication subsystem. */
  SCE_AUTH(9);

  companion object {

    fun decode(reader: XdrReader): SCErrorTypeXdr {
      val value = reader.readInt()
      return entries.find { it.value == value }
        ?: throw IllegalArgumentException("Unknown SCErrorTypeXdr value: $value")
    }
  }

  fun encode(writer: XdrWriter) {
    writer.writeInt(value)
  }
}
