// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union CreateClaimableBalanceResult switch (
 *     CreateClaimableBalanceResultCode code)
 * {
 * case CREATE_CLAIMABLE_BALANCE_SUCCESS:
 *     ClaimableBalanceID balanceID;
 * case CREATE_CLAIMABLE_BALANCE_MALFORMED:
 * case CREATE_CLAIMABLE_BALANCE_LOW_RESERVE:
 * case CREATE_CLAIMABLE_BALANCE_NO_TRUST:
 * case CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED:
 * case CREATE_CLAIMABLE_BALANCE_UNDERFUNDED:
 *     void;
 * };
 */
sealed class CreateClaimableBalanceResultXdr {
  abstract val discriminant: CreateClaimableBalanceResultCodeXdr

  data class BalanceID(
    val value: ClaimableBalanceIDXdr
  ) : CreateClaimableBalanceResultXdr() {
    override val discriminant: CreateClaimableBalanceResultCodeXdr = CreateClaimableBalanceResultCodeXdr.CREATE_CLAIMABLE_BALANCE_SUCCESS
  }

  data object Void : CreateClaimableBalanceResultXdr() {
    override val discriminant: CreateClaimableBalanceResultCodeXdr = CreateClaimableBalanceResultCodeXdr.CREATE_CLAIMABLE_BALANCE_MALFORMED
  }

  companion object {

    fun decode(reader: XdrReader): CreateClaimableBalanceResultXdr {
      val discriminant = CreateClaimableBalanceResultCodeXdr.decode(reader)
      return when (discriminant) {
        CreateClaimableBalanceResultCodeXdr.CREATE_CLAIMABLE_BALANCE_SUCCESS -> {
          val value = ClaimableBalanceIDXdr.decode(reader)
          BalanceID(value)
        }
        CreateClaimableBalanceResultCodeXdr.CREATE_CLAIMABLE_BALANCE_MALFORMED -> Void
        CreateClaimableBalanceResultCodeXdr.CREATE_CLAIMABLE_BALANCE_LOW_RESERVE -> Void
        CreateClaimableBalanceResultCodeXdr.CREATE_CLAIMABLE_BALANCE_NO_TRUST -> Void
        CreateClaimableBalanceResultCodeXdr.CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED -> Void
        CreateClaimableBalanceResultCodeXdr.CREATE_CLAIMABLE_BALANCE_UNDERFUNDED -> Void
        else -> throw IllegalArgumentException("Unknown CreateClaimableBalanceResultXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is BalanceID -> {
        value.encode(writer)
      }
      is Void -> {}
    }
  }
}
