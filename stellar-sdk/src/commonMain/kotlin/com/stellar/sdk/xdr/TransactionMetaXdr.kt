// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.stellar.sdk.xdr

/**
 * XDR Source:
 * union TransactionMeta switch (int v)
 * {
 * case 0:
 *     OperationMeta operations<>;
 * case 1:
 *     TransactionMetaV1 v1;
 * case 2:
 *     TransactionMetaV2 v2;
 * case 3:
 *     TransactionMetaV3 v3;
 * case 4:
 *     TransactionMetaV4 v4;
 * };
 */
sealed class TransactionMetaXdr {
  abstract val discriminant: Int

  data class Operations(
    val value: List<OperationMetaXdr>
  ) : TransactionMetaXdr() {
    override val discriminant: Int = 0
  }

  data class V1(
    val value: TransactionMetaV1Xdr
  ) : TransactionMetaXdr() {
    override val discriminant: Int = 1
  }

  data class V2(
    val value: TransactionMetaV2Xdr
  ) : TransactionMetaXdr() {
    override val discriminant: Int = 2
  }

  data class V3(
    val value: TransactionMetaV3Xdr
  ) : TransactionMetaXdr() {
    override val discriminant: Int = 3
  }

  data class V4(
    val value: TransactionMetaV4Xdr
  ) : TransactionMetaXdr() {
    override val discriminant: Int = 4
  }

  companion object {

    fun decode(reader: XdrReader): TransactionMetaXdr {
      val discriminant = reader.readInt()
      return when (discriminant) {
        0 -> {
          val value = List(reader.readInt()) { OperationMetaXdr.decode(reader) }
          Operations(value)
        }
        1 -> {
          val value = TransactionMetaV1Xdr.decode(reader)
          V1(value)
        }
        2 -> {
          val value = TransactionMetaV2Xdr.decode(reader)
          V2(value)
        }
        3 -> {
          val value = TransactionMetaV3Xdr.decode(reader)
          V3(value)
        }
        4 -> {
          val value = TransactionMetaV4Xdr.decode(reader)
          V4(value)
        }
        else -> throw IllegalArgumentException("Unknown TransactionMetaXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    writer.writeInt(discriminant)
    when (this) {
      is Operations -> {
        writer.writeInt(value.size)
        value.forEach { item ->
          item.encode(writer)
        }
      }
      is V1 -> {
        value.encode(writer)
      }
      is V2 -> {
        value.encode(writer)
      }
      is V3 -> {
        value.encode(writer)
      }
      is V4 -> {
        value.encode(writer)
      }
    }
  }
}
