package com.stellar.sdk.rpc.requests

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * Request for JSON-RPC method getEvents.
 *
 * Fetches a filtered list of events emitted by a given ledger range.
 *
 * @property startLedger Ledger sequence number to start fetching events from (inclusive).
 * @property filters List of event filters to match against. Events matching any filter will be included.
 * @property pagination Optional pagination configuration for limiting and controlling result sets.
 *
 * @see <a href="https://developers.stellar.org/docs/data/rpc/api-reference/methods/getEvents">getEvents documentation</a>
 */
@Serializable
data class GetEventsRequest(
    val startLedger: Long,
    val filters: List<EventFilter>,
    val pagination: Pagination? = null
) {
    init {
        require(startLedger > 0) { "startLedger must be positive" }
        require(filters.isNotEmpty()) { "filters must not be empty" }
        require(filters.size <= 5) { "filters must not exceed 5 items" }
        pagination?.let {
            it.limit?.let { limit ->
                require(limit > 0) { "pagination.limit must be positive" }
                require(limit <= 10000) { "pagination.limit must not exceed 10000" }
            }
        }
    }

    /**
     * Pagination options for controlling the number of results returned.
     *
     * @property cursor Continuation token from a previous response for fetching the next page.
     * @property limit Maximum number of events to return (default 100, max 10000).
     */
    @Serializable
    data class Pagination(
        val cursor: String? = null,
        val limit: Long? = null
    )

    /**
     * Filter configuration for event matching.
     *
     * @property type Type of events to match (contract, system, or diagnostic).
     * @property contractIds List of contract IDs to filter by. If null or empty, matches events from any contract.
     * @property topics List of topic filters. Each inner list represents alternative values for that topic position.
     *                  A topic matches if it equals any value in its position's list.
     *
     * Example topics structure:
     * ```
     * [
     *   ["transfer", "mint"],  // Match events with topic[0] = "transfer" OR "mint"
     *   ["*"]                  // Match any value for topic[1]
     * ]
     * ```
     */
    @Serializable
    data class EventFilter(
        val type: EventFilterType,
        val contractIds: List<String>? = null,
        val topics: List<List<String>>? = null
    ) {
        init {
            contractIds?.forEach { contractId ->
                require(contractId.isNotBlank()) { "contractIds must not contain blank entries" }
            }
            topics?.let {
                require(it.size <= 4) { "topics must not exceed 4 items (max topic segments)" }
                it.forEach { topicList ->
                    require(topicList.isNotEmpty()) { "topic filter lists must not be empty" }
                }
            }
        }
    }

    /**
     * Type of event to filter.
     *
     * @property SYSTEM System events generated by the Stellar protocol.
     * @property CONTRACT Events emitted by smart contracts.
     * @property DIAGNOSTIC Diagnostic events for debugging (only available in simulation).
     */
    @Serializable
    enum class EventFilterType {
        @SerialName("system")
        SYSTEM,

        @SerialName("contract")
        CONTRACT,

        @SerialName("diagnostic")
        DIAGNOSTIC
    }
}
