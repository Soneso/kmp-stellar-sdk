// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * struct ConfigSettingContractLedgerCostExtV0
 * {
 *     // Maximum number of RO+RW entries in the transaction footprint.
 *     uint32 txMaxFootprintEntries;
 *     // Fee per 1 KB of data written to the ledger.
 *     // Unlike the rent fee, this is a flat fee that is charged for any ledger
 *     // write, independent of the type of the entry being written.
 *     int64 feeWrite1KB;
 * };
 */
data class ConfigSettingContractLedgerCostExtV0Xdr(
  /** Maximum number of RO+RW entries in the transaction footprint. */
  val txMaxFootprintEntries: Uint32Xdr,
  /**
   * Fee per 1 KB of data written to the ledger.
   * Unlike the rent fee, this is a flat fee that is charged for any ledger
   * write, independent of the type of the entry being written.
   */
  val feeWrite1Kb: Int64Xdr
) {
  companion object {

    fun decode(reader: XdrReader): ConfigSettingContractLedgerCostExtV0Xdr {
      val txMaxFootprintEntries = Uint32Xdr.decode(reader)
      val feeWrite1Kb = Int64Xdr.decode(reader)
      return ConfigSettingContractLedgerCostExtV0Xdr(txMaxFootprintEntries, feeWrite1Kb)
    }
  }

  fun encode(writer: XdrWriter) {
    txMaxFootprintEntries.encode(writer)
    feeWrite1Kb.encode(writer)
  }
}
