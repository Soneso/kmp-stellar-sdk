// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union SCSpecTypeDef switch (SCSpecType type)
 * {
 * case SC_SPEC_TYPE_VAL:
 * case SC_SPEC_TYPE_BOOL:
 * case SC_SPEC_TYPE_VOID:
 * case SC_SPEC_TYPE_ERROR:
 * case SC_SPEC_TYPE_U32:
 * case SC_SPEC_TYPE_I32:
 * case SC_SPEC_TYPE_U64:
 * case SC_SPEC_TYPE_I64:
 * case SC_SPEC_TYPE_TIMEPOINT:
 * case SC_SPEC_TYPE_DURATION:
 * case SC_SPEC_TYPE_U128:
 * case SC_SPEC_TYPE_I128:
 * case SC_SPEC_TYPE_U256:
 * case SC_SPEC_TYPE_I256:
 * case SC_SPEC_TYPE_BYTES:
 * case SC_SPEC_TYPE_STRING:
 * case SC_SPEC_TYPE_SYMBOL:
 * case SC_SPEC_TYPE_ADDRESS:
 * case SC_SPEC_TYPE_MUXED_ADDRESS:
 *     void;
 * case SC_SPEC_TYPE_OPTION:
 *     SCSpecTypeOption option;
 * case SC_SPEC_TYPE_RESULT:
 *     SCSpecTypeResult result;
 * case SC_SPEC_TYPE_VEC:
 *     SCSpecTypeVec vec;
 * case SC_SPEC_TYPE_MAP:
 *     SCSpecTypeMap map;
 * case SC_SPEC_TYPE_TUPLE:
 *     SCSpecTypeTuple tuple;
 * case SC_SPEC_TYPE_BYTES_N:
 *     SCSpecTypeBytesN bytesN;
 * case SC_SPEC_TYPE_UDT:
 *     SCSpecTypeUDT udt;
 * };
 */
sealed class SCSpecTypeDefXdr {
  abstract val discriminant: SCSpecTypeXdr

  data class Option(
    val value: SCSpecTypeOptionXdr
  ) : SCSpecTypeDefXdr() {
    override val discriminant: SCSpecTypeXdr = SCSpecTypeXdr.SC_SPEC_TYPE_OPTION
  }

  data class Result(
    val value: SCSpecTypeResultXdr
  ) : SCSpecTypeDefXdr() {
    override val discriminant: SCSpecTypeXdr = SCSpecTypeXdr.SC_SPEC_TYPE_RESULT
  }

  data class Vec(
    val value: SCSpecTypeVecXdr
  ) : SCSpecTypeDefXdr() {
    override val discriminant: SCSpecTypeXdr = SCSpecTypeXdr.SC_SPEC_TYPE_VEC
  }

  data class Map(
    val value: SCSpecTypeMapXdr
  ) : SCSpecTypeDefXdr() {
    override val discriminant: SCSpecTypeXdr = SCSpecTypeXdr.SC_SPEC_TYPE_MAP
  }

  data class Tuple(
    val value: SCSpecTypeTupleXdr
  ) : SCSpecTypeDefXdr() {
    override val discriminant: SCSpecTypeXdr = SCSpecTypeXdr.SC_SPEC_TYPE_TUPLE
  }

  data class BytesN(
    val value: SCSpecTypeBytesNXdr
  ) : SCSpecTypeDefXdr() {
    override val discriminant: SCSpecTypeXdr = SCSpecTypeXdr.SC_SPEC_TYPE_BYTES_N
  }

  data class Udt(
    val value: SCSpecTypeUDTXdr
  ) : SCSpecTypeDefXdr() {
    override val discriminant: SCSpecTypeXdr = SCSpecTypeXdr.SC_SPEC_TYPE_UDT
  }

  data class Void(
    override val discriminant: SCSpecTypeXdr
  ) : SCSpecTypeDefXdr()

  companion object {

    fun decode(reader: XdrReader): SCSpecTypeDefXdr {
      val discriminant = SCSpecTypeXdr.decode(reader)
      return when (discriminant) {
        SCSpecTypeXdr.SC_SPEC_TYPE_VAL -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_BOOL -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_VOID -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_ERROR -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_U32 -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_I32 -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_U64 -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_I64 -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_TIMEPOINT -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_DURATION -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_U128 -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_I128 -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_U256 -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_I256 -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_BYTES -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_STRING -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_SYMBOL -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_ADDRESS -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_MUXED_ADDRESS -> Void(discriminant)
        SCSpecTypeXdr.SC_SPEC_TYPE_OPTION -> {
          val value = SCSpecTypeOptionXdr.decode(reader)
          Option(value)
        }
        SCSpecTypeXdr.SC_SPEC_TYPE_RESULT -> {
          val value = SCSpecTypeResultXdr.decode(reader)
          Result(value)
        }
        SCSpecTypeXdr.SC_SPEC_TYPE_VEC -> {
          val value = SCSpecTypeVecXdr.decode(reader)
          Vec(value)
        }
        SCSpecTypeXdr.SC_SPEC_TYPE_MAP -> {
          val value = SCSpecTypeMapXdr.decode(reader)
          Map(value)
        }
        SCSpecTypeXdr.SC_SPEC_TYPE_TUPLE -> {
          val value = SCSpecTypeTupleXdr.decode(reader)
          Tuple(value)
        }
        SCSpecTypeXdr.SC_SPEC_TYPE_BYTES_N -> {
          val value = SCSpecTypeBytesNXdr.decode(reader)
          BytesN(value)
        }
        SCSpecTypeXdr.SC_SPEC_TYPE_UDT -> {
          val value = SCSpecTypeUDTXdr.decode(reader)
          Udt(value)
        }
        else -> throw IllegalArgumentException("Unknown SCSpecTypeDefXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
      is Option -> {
        value.encode(writer)
      }
      is Result -> {
        value.encode(writer)
      }
      is Vec -> {
        value.encode(writer)
      }
      is Map -> {
        value.encode(writer)
      }
      is Tuple -> {
        value.encode(writer)
      }
      is BytesN -> {
        value.encode(writer)
      }
      is Udt -> {
        value.encode(writer)
      }
    }
  }
}
