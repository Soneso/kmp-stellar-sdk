// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union LiquidityPoolWithdrawResult switch (LiquidityPoolWithdrawResultCode code)
 * {
 * case LIQUIDITY_POOL_WITHDRAW_SUCCESS:
 *     void;
 * case LIQUIDITY_POOL_WITHDRAW_MALFORMED:
 * case LIQUIDITY_POOL_WITHDRAW_NO_TRUST:
 * case LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED:
 * case LIQUIDITY_POOL_WITHDRAW_LINE_FULL:
 * case LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM:
 *     void;
 * };
 */
sealed class LiquidityPoolWithdrawResultXdr {
  abstract val discriminant: LiquidityPoolWithdrawResultCodeXdr

  data class Void(
    override val discriminant: LiquidityPoolWithdrawResultCodeXdr
  ) : LiquidityPoolWithdrawResultXdr()

  companion object {

    fun decode(reader: XdrReader): LiquidityPoolWithdrawResultXdr {
      val discriminant = LiquidityPoolWithdrawResultCodeXdr.decode(reader)
      return when (discriminant) {
        LiquidityPoolWithdrawResultCodeXdr.LIQUIDITY_POOL_WITHDRAW_SUCCESS -> Void(discriminant)
        LiquidityPoolWithdrawResultCodeXdr.LIQUIDITY_POOL_WITHDRAW_MALFORMED -> Void(discriminant)
        LiquidityPoolWithdrawResultCodeXdr.LIQUIDITY_POOL_WITHDRAW_NO_TRUST -> Void(discriminant)
        LiquidityPoolWithdrawResultCodeXdr.LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED -> Void(discriminant)
        LiquidityPoolWithdrawResultCodeXdr.LIQUIDITY_POOL_WITHDRAW_LINE_FULL -> Void(discriminant)
        LiquidityPoolWithdrawResultCodeXdr.LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM -> Void(discriminant)
        else -> throw IllegalArgumentException("Unknown LiquidityPoolWithdrawResultXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
    }
  }
}
