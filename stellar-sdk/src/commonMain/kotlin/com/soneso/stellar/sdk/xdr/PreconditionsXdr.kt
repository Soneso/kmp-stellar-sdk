// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union Preconditions switch (PreconditionType type)
 * {
 * case PRECOND_NONE:
 *     void;
 * case PRECOND_TIME:
 *     TimeBounds timeBounds;
 * case PRECOND_V2:
 *     PreconditionsV2 v2;
 * };
 */
sealed class PreconditionsXdr {
  abstract val discriminant: PreconditionTypeXdr

  data class TimeBounds(
    val value: TimeBoundsXdr
  ) : PreconditionsXdr() {
    override val discriminant: PreconditionTypeXdr = PreconditionTypeXdr.PRECOND_TIME
  }

  data class V2(
    val value: PreconditionsV2Xdr
  ) : PreconditionsXdr() {
    override val discriminant: PreconditionTypeXdr = PreconditionTypeXdr.PRECOND_V2
  }

  data object Void : PreconditionsXdr() {
    override val discriminant: PreconditionTypeXdr = PreconditionTypeXdr.PRECOND_NONE
  }

  companion object {

    fun decode(reader: XdrReader): PreconditionsXdr {
      val discriminant = PreconditionTypeXdr.decode(reader)
      return when (discriminant) {
        PreconditionTypeXdr.PRECOND_NONE -> Void
        PreconditionTypeXdr.PRECOND_TIME -> {
          val value = TimeBoundsXdr.decode(reader)
          TimeBounds(value)
        }
        PreconditionTypeXdr.PRECOND_V2 -> {
          val value = PreconditionsV2Xdr.decode(reader)
          V2(value)
        }
        else -> throw IllegalArgumentException("Unknown PreconditionsXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
      is TimeBounds -> {
        value.encode(writer)
      }
      is V2 -> {
        value.encode(writer)
      }
    }
  }
}
