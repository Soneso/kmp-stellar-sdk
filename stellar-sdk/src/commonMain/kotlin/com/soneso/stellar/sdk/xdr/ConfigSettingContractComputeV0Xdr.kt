// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * struct ConfigSettingContractComputeV0
 * {
 *     // Maximum instructions per ledger
 *     int64 ledgerMaxInstructions;
 *     // Maximum instructions per transaction
 *     int64 txMaxInstructions;
 *     // Cost of 10000 instructions
 *     int64 feeRatePerInstructionsIncrement;
 * 
 *     // Memory limit per transaction. Unlike instructions, there is no fee
 *     // for memory, just the limit.
 *     uint32 txMemoryLimit;
 * };
 */
data class ConfigSettingContractComputeV0Xdr(
  /** Maximum instructions per ledger */
  val ledgerMaxInstructions: Int64Xdr,
  /** Maximum instructions per transaction */
  val txMaxInstructions: Int64Xdr,
  /** Cost of 10000 instructions */
  val feeRatePerInstructionsIncrement: Int64Xdr,
  /**
   * Memory limit per transaction. Unlike instructions, there is no fee
   * for memory, just the limit.
   */
  val txMemoryLimit: Uint32Xdr
) {
  companion object {

    fun decode(reader: XdrReader): ConfigSettingContractComputeV0Xdr {
      val ledgerMaxInstructions = Int64Xdr.decode(reader)
      val txMaxInstructions = Int64Xdr.decode(reader)
      val feeRatePerInstructionsIncrement = Int64Xdr.decode(reader)
      val txMemoryLimit = Uint32Xdr.decode(reader)
      return ConfigSettingContractComputeV0Xdr(ledgerMaxInstructions, txMaxInstructions, feeRatePerInstructionsIncrement, txMemoryLimit)
    }
  }

  fun encode(writer: XdrWriter) {
    ledgerMaxInstructions.encode(writer)
    txMaxInstructions.encode(writer)
    feeRatePerInstructionsIncrement.encode(writer)
    txMemoryLimit.encode(writer)
  }
}
