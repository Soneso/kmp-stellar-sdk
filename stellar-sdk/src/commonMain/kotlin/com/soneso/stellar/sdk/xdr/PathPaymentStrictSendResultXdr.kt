// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union PathPaymentStrictSendResult switch (PathPaymentStrictSendResultCode code)
 * {
 * case PATH_PAYMENT_STRICT_SEND_SUCCESS:
 *     struct
 *     {
 *         ClaimAtom offers<>;
 *         SimplePaymentResult last;
 *     } success;
 * case PATH_PAYMENT_STRICT_SEND_MALFORMED:
 * case PATH_PAYMENT_STRICT_SEND_UNDERFUNDED:
 * case PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST:
 * case PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED:
 * case PATH_PAYMENT_STRICT_SEND_NO_DESTINATION:
 * case PATH_PAYMENT_STRICT_SEND_NO_TRUST:
 * case PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED:
 * case PATH_PAYMENT_STRICT_SEND_LINE_FULL:
 *     void;
 * case PATH_PAYMENT_STRICT_SEND_NO_ISSUER:
 *     Asset noIssuer; // the asset that caused the error
 * case PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS:
 * case PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF:
 * case PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN:
 *     void;
 * };
 */
sealed class PathPaymentStrictSendResultXdr {
  abstract val discriminant: PathPaymentStrictSendResultCodeXdr

  data class Success(
    val value: PathPaymentStrictSendResultSuccessXdr
  ) : PathPaymentStrictSendResultXdr() {
    override val discriminant: PathPaymentStrictSendResultCodeXdr = PathPaymentStrictSendResultCodeXdr.PATH_PAYMENT_STRICT_SEND_SUCCESS
  }

  data class NoIssuer(
    val value: AssetXdr
  ) : PathPaymentStrictSendResultXdr() {
    override val discriminant: PathPaymentStrictSendResultCodeXdr = PathPaymentStrictSendResultCodeXdr.PATH_PAYMENT_STRICT_SEND_NO_ISSUER
  }

  data class Void(
    override val discriminant: PathPaymentStrictSendResultCodeXdr
  ) : PathPaymentStrictSendResultXdr()

  companion object {

    fun decode(reader: XdrReader): PathPaymentStrictSendResultXdr {
      val discriminant = PathPaymentStrictSendResultCodeXdr.decode(reader)
      return when (discriminant) {
        PathPaymentStrictSendResultCodeXdr.PATH_PAYMENT_STRICT_SEND_SUCCESS -> {
          val value = PathPaymentStrictSendResultSuccessXdr.decode(reader)
          Success(value)
        }
        PathPaymentStrictSendResultCodeXdr.PATH_PAYMENT_STRICT_SEND_MALFORMED -> Void(discriminant)
        PathPaymentStrictSendResultCodeXdr.PATH_PAYMENT_STRICT_SEND_UNDERFUNDED -> Void(discriminant)
        PathPaymentStrictSendResultCodeXdr.PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST -> Void(discriminant)
        PathPaymentStrictSendResultCodeXdr.PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED -> Void(discriminant)
        PathPaymentStrictSendResultCodeXdr.PATH_PAYMENT_STRICT_SEND_NO_DESTINATION -> Void(discriminant)
        PathPaymentStrictSendResultCodeXdr.PATH_PAYMENT_STRICT_SEND_NO_TRUST -> Void(discriminant)
        PathPaymentStrictSendResultCodeXdr.PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED -> Void(discriminant)
        PathPaymentStrictSendResultCodeXdr.PATH_PAYMENT_STRICT_SEND_LINE_FULL -> Void(discriminant)
        PathPaymentStrictSendResultCodeXdr.PATH_PAYMENT_STRICT_SEND_NO_ISSUER -> {
          val value = AssetXdr.decode(reader)
          NoIssuer(value)
        }
        PathPaymentStrictSendResultCodeXdr.PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS -> Void(discriminant)
        PathPaymentStrictSendResultCodeXdr.PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF -> Void(discriminant)
        PathPaymentStrictSendResultCodeXdr.PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN -> Void(discriminant)
        else -> throw IllegalArgumentException("Unknown PathPaymentStrictSendResultXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Success -> {
        value.encode(writer)
      }
      is Void -> {}
      is NoIssuer -> {
        value.encode(writer)
      }
      is Void -> {}
    }
  }
}
