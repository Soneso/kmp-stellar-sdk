// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * struct SorobanTransactionMeta
 * {
 *     SorobanTransactionMetaExt ext;
 * 
 *     ContractEvent events<>;             // custom events populated by the
 *                                         // contracts themselves.
 *     SCVal returnValue;                  // return value of the host fn invocation
 * 
 *     // Diagnostics events that are not hashed.
 *     // This will contain all contract and diagnostic events. Even ones
 *     // that were emitted in a failed contract call.
 *     DiagnosticEvent diagnosticEvents<>;
 * };
 */
data class SorobanTransactionMetaXdr(
  val ext: SorobanTransactionMetaExtXdr,
  val events: List<ContractEventXdr>,
  /**
   * contracts themselves.
   * return value of the host fn invocation
   */
  val returnValue: SCValXdr,
  val diagnosticEvents: List<DiagnosticEventXdr>
) {
  companion object {

    fun decode(reader: XdrReader): SorobanTransactionMetaXdr {
      val ext = SorobanTransactionMetaExtXdr.decode(reader)
      val events = List(reader.readInt()) { ContractEventXdr.decode(reader) }
      val returnValue = SCValXdr.decode(reader)
      val diagnosticEvents = List(reader.readInt()) { DiagnosticEventXdr.decode(reader) }
      return SorobanTransactionMetaXdr(ext, events, returnValue, diagnosticEvents)
    }
  }

  fun encode(writer: XdrWriter) {
    ext.encode(writer)
    writer.writeInt(events.size)
    events.forEach { item ->
      item.encode(writer)
    }
    returnValue.encode(writer)
    writer.writeInt(diagnosticEvents.size)
    diagnosticEvents.forEach { item ->
      item.encode(writer)
    }
  }
}
