// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * struct ContractEvent
 * {
 *     // We can use this to add more fields, or because it
 *     // is first, to change ContractEvent into a union.
 *     ExtensionPoint ext;
 * 
 *     ContractID* contractID;
 *     ContractEventType type;
 * 
 *     union switch (int v)
 *     {
 *     case 0:
 *         struct
 *         {
 *             SCVal topics<>;
 *             SCVal data;
 *         } v0;
 *     }
 *     body;
 * };
 */
data class ContractEventXdr(
  /**
   * We can use this to add more fields, or because it
   * is first, to change ContractEvent into a union.
   */
  val ext: ExtensionPointXdr,
  val contractId: ContractIDXdr?,
  val type: ContractEventTypeXdr,
  val body: ContractEventBodyXdr
) {
  companion object {

    fun decode(reader: XdrReader): ContractEventXdr {
      val ext = ExtensionPointXdr.decode(reader)
      val contractId = if (reader.readBoolean()) ContractIDXdr.decode(reader) else null
      val type = ContractEventTypeXdr.decode(reader)
      val body = ContractEventBodyXdr.decode(reader)
      return ContractEventXdr(ext, contractId, type, body)
    }
  }

  fun encode(writer: XdrWriter) {
    ext.encode(writer)
    if (contractId != null) {
      writer.writeBoolean(true)
      contractId.encode(writer)
    } else {
      writer.writeBoolean(false)
    }
    type.encode(writer)
    body.encode(writer)
  }
}
