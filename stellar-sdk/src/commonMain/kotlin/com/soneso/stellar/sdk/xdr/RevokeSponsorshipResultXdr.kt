// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union RevokeSponsorshipResult switch (RevokeSponsorshipResultCode code)
 * {
 * case REVOKE_SPONSORSHIP_SUCCESS:
 *     void;
 * case REVOKE_SPONSORSHIP_DOES_NOT_EXIST:
 * case REVOKE_SPONSORSHIP_NOT_SPONSOR:
 * case REVOKE_SPONSORSHIP_LOW_RESERVE:
 * case REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE:
 * case REVOKE_SPONSORSHIP_MALFORMED:
 *     void;
 * };
 */
sealed class RevokeSponsorshipResultXdr {
  abstract val discriminant: RevokeSponsorshipResultCodeXdr

  data class Void(
    override val discriminant: RevokeSponsorshipResultCodeXdr
  ) : RevokeSponsorshipResultXdr()

  companion object {

    fun decode(reader: XdrReader): RevokeSponsorshipResultXdr {
      val discriminant = RevokeSponsorshipResultCodeXdr.decode(reader)
      return when (discriminant) {
        RevokeSponsorshipResultCodeXdr.REVOKE_SPONSORSHIP_SUCCESS -> Void(discriminant)
        RevokeSponsorshipResultCodeXdr.REVOKE_SPONSORSHIP_DOES_NOT_EXIST -> Void(discriminant)
        RevokeSponsorshipResultCodeXdr.REVOKE_SPONSORSHIP_NOT_SPONSOR -> Void(discriminant)
        RevokeSponsorshipResultCodeXdr.REVOKE_SPONSORSHIP_LOW_RESERVE -> Void(discriminant)
        RevokeSponsorshipResultCodeXdr.REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE -> Void(discriminant)
        RevokeSponsorshipResultCodeXdr.REVOKE_SPONSORSHIP_MALFORMED -> Void(discriminant)
        else -> throw IllegalArgumentException("Unknown RevokeSponsorshipResultXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
      is Void -> {}
    }
  }
}
