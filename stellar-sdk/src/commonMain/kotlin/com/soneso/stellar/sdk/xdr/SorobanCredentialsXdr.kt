// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union SorobanCredentials switch (SorobanCredentialsType type)
 * {
 * case SOROBAN_CREDENTIALS_SOURCE_ACCOUNT:
 *     void;
 * case SOROBAN_CREDENTIALS_ADDRESS:
 *     SorobanAddressCredentials address;
 * };
 */
sealed class SorobanCredentialsXdr {
  abstract val discriminant: SorobanCredentialsTypeXdr

  data class Address(
    val value: SorobanAddressCredentialsXdr
  ) : SorobanCredentialsXdr() {
    override val discriminant: SorobanCredentialsTypeXdr = SorobanCredentialsTypeXdr.SOROBAN_CREDENTIALS_ADDRESS
  }

  data object Void : SorobanCredentialsXdr() {
    override val discriminant: SorobanCredentialsTypeXdr = SorobanCredentialsTypeXdr.SOROBAN_CREDENTIALS_SOURCE_ACCOUNT
  }

  companion object {

    fun decode(reader: XdrReader): SorobanCredentialsXdr {
      val discriminant = SorobanCredentialsTypeXdr.decode(reader)
      return when (discriminant) {
        SorobanCredentialsTypeXdr.SOROBAN_CREDENTIALS_SOURCE_ACCOUNT -> Void
        SorobanCredentialsTypeXdr.SOROBAN_CREDENTIALS_ADDRESS -> {
          val value = SorobanAddressCredentialsXdr.decode(reader)
          Address(value)
        }
        else -> throw IllegalArgumentException("Unknown SorobanCredentialsXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
      is Address -> {
        value.encode(writer)
      }
    }
  }
}
