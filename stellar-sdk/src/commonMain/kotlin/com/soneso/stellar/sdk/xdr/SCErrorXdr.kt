// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union SCError switch (SCErrorType type)
 * {
 * case SCE_CONTRACT:
 *     uint32 contractCode;
 * case SCE_WASM_VM:
 * case SCE_CONTEXT:
 * case SCE_STORAGE:
 * case SCE_OBJECT:
 * case SCE_CRYPTO:
 * case SCE_EVENTS:
 * case SCE_BUDGET:
 * case SCE_VALUE:
 * case SCE_AUTH:
 *     SCErrorCode code;
 * };
 */
sealed class SCErrorXdr {
  abstract val discriminant: SCErrorTypeXdr

  data class ContractCode(
    val value: Uint32Xdr
  ) : SCErrorXdr() {
    override val discriminant: SCErrorTypeXdr = SCErrorTypeXdr.SCE_CONTRACT
  }

  data class Code(
    val value: SCErrorCodeXdr
  ) : SCErrorXdr() {
    override val discriminant: SCErrorTypeXdr = SCErrorTypeXdr.SCE_WASM_VM
  }

  companion object {

    fun decode(reader: XdrReader): SCErrorXdr {
      val discriminant = SCErrorTypeXdr.decode(reader)
      return when (discriminant) {
        SCErrorTypeXdr.SCE_CONTRACT -> {
          val value = Uint32Xdr.decode(reader)
          ContractCode(value)
        }
        SCErrorTypeXdr.SCE_WASM_VM -> {
          val value = SCErrorCodeXdr.decode(reader)
          Code(value)
        }
        SCErrorTypeXdr.SCE_CONTEXT -> {
          val value = SCErrorCodeXdr.decode(reader)
          Code(value)
        }
        SCErrorTypeXdr.SCE_STORAGE -> {
          val value = SCErrorCodeXdr.decode(reader)
          Code(value)
        }
        SCErrorTypeXdr.SCE_OBJECT -> {
          val value = SCErrorCodeXdr.decode(reader)
          Code(value)
        }
        SCErrorTypeXdr.SCE_CRYPTO -> {
          val value = SCErrorCodeXdr.decode(reader)
          Code(value)
        }
        SCErrorTypeXdr.SCE_EVENTS -> {
          val value = SCErrorCodeXdr.decode(reader)
          Code(value)
        }
        SCErrorTypeXdr.SCE_BUDGET -> {
          val value = SCErrorCodeXdr.decode(reader)
          Code(value)
        }
        SCErrorTypeXdr.SCE_VALUE -> {
          val value = SCErrorCodeXdr.decode(reader)
          Code(value)
        }
        SCErrorTypeXdr.SCE_AUTH -> {
          val value = SCErrorCodeXdr.decode(reader)
          Code(value)
        }
        else -> throw IllegalArgumentException("Unknown SCErrorXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is ContractCode -> {
        value.encode(writer)
      }
      is Code -> {
        value.encode(writer)
      }
    }
  }
}
