// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union Claimant switch (ClaimantType type)
 * {
 * case CLAIMANT_TYPE_V0:
 *     struct
 *     {
 *         AccountID destination;    // The account that can use this condition
 *         ClaimPredicate predicate; // Claimable if predicate is true
 *     } v0;
 * };
 */
sealed class ClaimantXdr {
  abstract val discriminant: ClaimantTypeXdr

  data class V0(
    val value: ClaimantV0Xdr
  ) : ClaimantXdr() {
    override val discriminant: ClaimantTypeXdr = ClaimantTypeXdr.CLAIMANT_TYPE_V0
  }

  companion object {

    fun decode(reader: XdrReader): ClaimantXdr {
      val discriminant = ClaimantTypeXdr.decode(reader)
      return when (discriminant) {
        ClaimantTypeXdr.CLAIMANT_TYPE_V0 -> {
          val value = ClaimantV0Xdr.decode(reader)
          V0(value)
        }
        else -> throw IllegalArgumentException("Unknown ClaimantXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is V0 -> {
        value.encode(writer)
      }
    }
  }
}
