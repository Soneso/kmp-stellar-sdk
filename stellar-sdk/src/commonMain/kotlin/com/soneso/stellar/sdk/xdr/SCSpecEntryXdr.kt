// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union SCSpecEntry switch (SCSpecEntryKind kind)
 * {
 * case SC_SPEC_ENTRY_FUNCTION_V0:
 *     SCSpecFunctionV0 functionV0;
 * case SC_SPEC_ENTRY_UDT_STRUCT_V0:
 *     SCSpecUDTStructV0 udtStructV0;
 * case SC_SPEC_ENTRY_UDT_UNION_V0:
 *     SCSpecUDTUnionV0 udtUnionV0;
 * case SC_SPEC_ENTRY_UDT_ENUM_V0:
 *     SCSpecUDTEnumV0 udtEnumV0;
 * case SC_SPEC_ENTRY_UDT_ERROR_ENUM_V0:
 *     SCSpecUDTErrorEnumV0 udtErrorEnumV0;
 * case SC_SPEC_ENTRY_EVENT_V0:
 *     SCSpecEventV0 eventV0;
 * };
 */
sealed class SCSpecEntryXdr {
  abstract val discriminant: SCSpecEntryKindXdr

  data class FunctionV0(
    val value: SCSpecFunctionV0Xdr
  ) : SCSpecEntryXdr() {
    override val discriminant: SCSpecEntryKindXdr = SCSpecEntryKindXdr.SC_SPEC_ENTRY_FUNCTION_V0
  }

  data class UdtStructV0(
    val value: SCSpecUDTStructV0Xdr
  ) : SCSpecEntryXdr() {
    override val discriminant: SCSpecEntryKindXdr = SCSpecEntryKindXdr.SC_SPEC_ENTRY_UDT_STRUCT_V0
  }

  data class UdtUnionV0(
    val value: SCSpecUDTUnionV0Xdr
  ) : SCSpecEntryXdr() {
    override val discriminant: SCSpecEntryKindXdr = SCSpecEntryKindXdr.SC_SPEC_ENTRY_UDT_UNION_V0
  }

  data class UdtEnumV0(
    val value: SCSpecUDTEnumV0Xdr
  ) : SCSpecEntryXdr() {
    override val discriminant: SCSpecEntryKindXdr = SCSpecEntryKindXdr.SC_SPEC_ENTRY_UDT_ENUM_V0
  }

  data class UdtErrorEnumV0(
    val value: SCSpecUDTErrorEnumV0Xdr
  ) : SCSpecEntryXdr() {
    override val discriminant: SCSpecEntryKindXdr = SCSpecEntryKindXdr.SC_SPEC_ENTRY_UDT_ERROR_ENUM_V0
  }

  data class EventV0(
    val value: SCSpecEventV0Xdr
  ) : SCSpecEntryXdr() {
    override val discriminant: SCSpecEntryKindXdr = SCSpecEntryKindXdr.SC_SPEC_ENTRY_EVENT_V0
  }

  companion object {

    fun decode(reader: XdrReader): SCSpecEntryXdr {
      val discriminant = SCSpecEntryKindXdr.decode(reader)
      return when (discriminant) {
        SCSpecEntryKindXdr.SC_SPEC_ENTRY_FUNCTION_V0 -> {
          val value = SCSpecFunctionV0Xdr.decode(reader)
          FunctionV0(value)
        }
        SCSpecEntryKindXdr.SC_SPEC_ENTRY_UDT_STRUCT_V0 -> {
          val value = SCSpecUDTStructV0Xdr.decode(reader)
          UdtStructV0(value)
        }
        SCSpecEntryKindXdr.SC_SPEC_ENTRY_UDT_UNION_V0 -> {
          val value = SCSpecUDTUnionV0Xdr.decode(reader)
          UdtUnionV0(value)
        }
        SCSpecEntryKindXdr.SC_SPEC_ENTRY_UDT_ENUM_V0 -> {
          val value = SCSpecUDTEnumV0Xdr.decode(reader)
          UdtEnumV0(value)
        }
        SCSpecEntryKindXdr.SC_SPEC_ENTRY_UDT_ERROR_ENUM_V0 -> {
          val value = SCSpecUDTErrorEnumV0Xdr.decode(reader)
          UdtErrorEnumV0(value)
        }
        SCSpecEntryKindXdr.SC_SPEC_ENTRY_EVENT_V0 -> {
          val value = SCSpecEventV0Xdr.decode(reader)
          EventV0(value)
        }
        else -> throw IllegalArgumentException("Unknown SCSpecEntryXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is FunctionV0 -> {
        value.encode(writer)
      }
      is UdtStructV0 -> {
        value.encode(writer)
      }
      is UdtUnionV0 -> {
        value.encode(writer)
      }
      is UdtEnumV0 -> {
        value.encode(writer)
      }
      is UdtErrorEnumV0 -> {
        value.encode(writer)
      }
      is EventV0 -> {
        value.encode(writer)
      }
    }
  }
}
