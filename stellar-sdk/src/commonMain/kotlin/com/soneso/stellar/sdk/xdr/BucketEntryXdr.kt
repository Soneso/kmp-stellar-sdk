// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union BucketEntry switch (BucketEntryType type)
 * {
 * case LIVEENTRY:
 * case INITENTRY:
 *     LedgerEntry liveEntry;
 * 
 * case DEADENTRY:
 *     LedgerKey deadEntry;
 * case METAENTRY:
 *     BucketMetadata metaEntry;
 * };
 */
sealed class BucketEntryXdr {
  abstract val discriminant: BucketEntryTypeXdr

  data class LiveEntry(
    val value: LedgerEntryXdr
  ) : BucketEntryXdr() {
    override val discriminant: BucketEntryTypeXdr = BucketEntryTypeXdr.LIVEENTRY
  }

  data class DeadEntry(
    val value: LedgerKeyXdr
  ) : BucketEntryXdr() {
    override val discriminant: BucketEntryTypeXdr = BucketEntryTypeXdr.DEADENTRY
  }

  data class MetaEntry(
    val value: BucketMetadataXdr
  ) : BucketEntryXdr() {
    override val discriminant: BucketEntryTypeXdr = BucketEntryTypeXdr.METAENTRY
  }

  companion object {

    fun decode(reader: XdrReader): BucketEntryXdr {
      val discriminant = BucketEntryTypeXdr.decode(reader)
      return when (discriminant) {
        BucketEntryTypeXdr.LIVEENTRY -> {
          val value = LedgerEntryXdr.decode(reader)
          LiveEntry(value)
        }
        BucketEntryTypeXdr.INITENTRY -> {
          val value = LedgerEntryXdr.decode(reader)
          LiveEntry(value)
        }
        BucketEntryTypeXdr.DEADENTRY -> {
          val value = LedgerKeyXdr.decode(reader)
          DeadEntry(value)
        }
        BucketEntryTypeXdr.METAENTRY -> {
          val value = BucketMetadataXdr.decode(reader)
          MetaEntry(value)
        }
        else -> throw IllegalArgumentException("Unknown BucketEntryXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is LiveEntry -> {
        value.encode(writer)
      }
      is DeadEntry -> {
        value.encode(writer)
      }
      is MetaEntry -> {
        value.encode(writer)
      }
    }
  }
}
