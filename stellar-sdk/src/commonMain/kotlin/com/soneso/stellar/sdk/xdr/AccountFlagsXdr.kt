// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * enum AccountFlags
 * { // masks for each flag
 * 
 *     // Flags set on issuer accounts
 *     // TrustLines are created with authorized set to "false" requiring
 *     // the issuer to set it for each TrustLine
 *     AUTH_REQUIRED_FLAG = 0x1,
 *     // If set, the authorized flag in TrustLines can be cleared
 *     // otherwise, authorization cannot be revoked
 *     AUTH_REVOCABLE_FLAG = 0x2,
 *     // Once set, causes all AUTH_* flags to be read-only
 *     AUTH_IMMUTABLE_FLAG = 0x4,
 *     // Trustlines are created with clawback enabled set to "true",
 *     // and claimable balances created from those trustlines are created
 *     // with clawback enabled set to "true"
 *     AUTH_CLAWBACK_ENABLED_FLAG = 0x8
 * };
 */
enum class AccountFlagsXdr(val value: Int) {
  /**
   * Flags set on issuer accounts
   * TrustLines are created with authorized set to "false" requiring
   * the issuer to set it for each TrustLine
   */
  AUTH_REQUIRED_FLAG(1),
  /**
   * If set, the authorized flag in TrustLines can be cleared
   * otherwise, authorization cannot be revoked
   */
  AUTH_REVOCABLE_FLAG(2),
  /** Once set, causes all AUTH_* flags to be read-only */
  AUTH_IMMUTABLE_FLAG(4),
  /**
   * Trustlines are created with clawback enabled set to "true",
   * and claimable balances created from those trustlines are created
   * with clawback enabled set to "true"
   */
  AUTH_CLAWBACK_ENABLED_FLAG(8);

  companion object {

    fun decode(reader: XdrReader): AccountFlagsXdr {
      val value = reader.readInt()
      return entries.find { it.value == value }
        ?: throw IllegalArgumentException("Unknown AccountFlagsXdr value: $value")
    }
  }

  fun encode(writer: XdrWriter) {
    writer.writeInt(value)
  }
}
