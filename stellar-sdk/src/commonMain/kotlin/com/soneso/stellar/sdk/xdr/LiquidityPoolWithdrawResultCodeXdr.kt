// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * enum LiquidityPoolWithdrawResultCode
 * {
 *     // codes considered as "success" for the operation
 *     LIQUIDITY_POOL_WITHDRAW_SUCCESS = 0,
 * 
 *     // codes considered as "failure" for the operation
 *     LIQUIDITY_POOL_WITHDRAW_MALFORMED = -1,    // bad input
 *     LIQUIDITY_POOL_WITHDRAW_NO_TRUST = -2,     // no trust line for one of the
 *                                                // assets
 *     LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED = -3,  // not enough balance of the
 *                                                // pool share
 *     LIQUIDITY_POOL_WITHDRAW_LINE_FULL = -4,    // would go above limit for one
 *                                                // of the assets
 *     LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM = -5 // didn't withdraw enough
 * };
 */
enum class LiquidityPoolWithdrawResultCodeXdr(val value: Int) {
  /** codes considered as "success" for the operation */
  LIQUIDITY_POOL_WITHDRAW_SUCCESS(0),
  /**
   * codes considered as "failure" for the operation
   * bad input
   */
  LIQUIDITY_POOL_WITHDRAW_MALFORMED(-1),
  /** no trust line for one of the */
  LIQUIDITY_POOL_WITHDRAW_NO_TRUST(-2),
  /**
   * assets
   * not enough balance of the
   */
  LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED(-3),
  /**
   * pool share
   * would go above limit for one
   */
  LIQUIDITY_POOL_WITHDRAW_LINE_FULL(-4),
  /**
   * of the assets
   * didn't withdraw enough
   */
  LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM(-5);

  companion object {

    fun decode(reader: XdrReader): LiquidityPoolWithdrawResultCodeXdr {
      val value = reader.readInt()
      return entries.find { it.value == value }
        ?: throw IllegalArgumentException("Unknown LiquidityPoolWithdrawResultCodeXdr value: $value")
    }
  }

  fun encode(writer: XdrWriter) {
    writer.writeInt(value)
  }
}
