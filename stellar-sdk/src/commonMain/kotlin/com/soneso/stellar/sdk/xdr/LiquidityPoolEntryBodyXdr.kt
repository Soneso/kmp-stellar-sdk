// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union switch (LiquidityPoolType type)
 *     {
 *     case LIQUIDITY_POOL_CONSTANT_PRODUCT:
 *         struct
 *         {
 *             LiquidityPoolConstantProductParameters params;
 * 
 *             int64 reserveA;        // amount of A in the pool
 *             int64 reserveB;        // amount of B in the pool
 *             int64 totalPoolShares; // total number of pool shares issued
 *             int64 poolSharesTrustLineCount; // number of trust lines for the
 *                                             // associated pool shares
 *         } constantProduct;
 *     }
 */
sealed class LiquidityPoolEntryBodyXdr {
  abstract val discriminant: LiquidityPoolTypeXdr

  data class ConstantProduct(
    val value: LiquidityPoolEntryConstantProductXdr
  ) : LiquidityPoolEntryBodyXdr() {
    override val discriminant: LiquidityPoolTypeXdr = LiquidityPoolTypeXdr.LIQUIDITY_POOL_CONSTANT_PRODUCT
  }

  companion object {

    fun decode(reader: XdrReader): LiquidityPoolEntryBodyXdr {
      val discriminant = LiquidityPoolTypeXdr.decode(reader)
      return when (discriminant) {
        LiquidityPoolTypeXdr.LIQUIDITY_POOL_CONSTANT_PRODUCT -> {
          val value = LiquidityPoolEntryConstantProductXdr.decode(reader)
          ConstantProduct(value)
        }
        else -> throw IllegalArgumentException("Unknown LiquidityPoolEntryBodyXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is ConstantProduct -> {
        value.encode(writer)
      }
    }
  }
}
