// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union LedgerKey switch (LedgerEntryType type)
 * {
 * case ACCOUNT:
 *     struct
 *     {
 *         AccountID accountID;
 *     } account;
 * 
 * case TRUSTLINE:
 *     struct
 *     {
 *         AccountID accountID;
 *         TrustLineAsset asset;
 *     } trustLine;
 * 
 * case OFFER:
 *     struct
 *     {
 *         AccountID sellerID;
 *         int64 offerID;
 *     } offer;
 * 
 * case DATA:
 *     struct
 *     {
 *         AccountID accountID;
 *         string64 dataName;
 *     } data;
 * 
 * case CLAIMABLE_BALANCE:
 *     struct
 *     {
 *         ClaimableBalanceID balanceID;
 *     } claimableBalance;
 * 
 * case LIQUIDITY_POOL:
 *     struct
 *     {
 *         PoolID liquidityPoolID;
 *     } liquidityPool;
 * case CONTRACT_DATA:
 *     struct
 *     {
 *         SCAddress contract;
 *         SCVal key;
 *         ContractDataDurability durability;
 *     } contractData;
 * case CONTRACT_CODE:
 *     struct
 *     {
 *         Hash hash;
 *     } contractCode;
 * case CONFIG_SETTING:
 *     struct
 *     {
 *         ConfigSettingID configSettingID;
 *     } configSetting;
 * case TTL:
 *     struct
 *     {
 *         // Hash of the LedgerKey that is associated with this TTLEntry
 *         Hash keyHash;
 *     } ttl;
 * };
 */
sealed class LedgerKeyXdr {
  abstract val discriminant: LedgerEntryTypeXdr

  data class Account(
    val value: LedgerKeyAccountXdr
  ) : LedgerKeyXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.ACCOUNT
  }

  data class TrustLine(
    val value: LedgerKeyTrustLineXdr
  ) : LedgerKeyXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.TRUSTLINE
  }

  data class Offer(
    val value: LedgerKeyOfferXdr
  ) : LedgerKeyXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.OFFER
  }

  data class Data(
    val value: LedgerKeyDataXdr
  ) : LedgerKeyXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.DATA
  }

  data class ClaimableBalance(
    val value: LedgerKeyClaimableBalanceXdr
  ) : LedgerKeyXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.CLAIMABLE_BALANCE
  }

  data class LiquidityPool(
    val value: LedgerKeyLiquidityPoolXdr
  ) : LedgerKeyXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.LIQUIDITY_POOL
  }

  data class ContractData(
    val value: LedgerKeyContractDataXdr
  ) : LedgerKeyXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.CONTRACT_DATA
  }

  data class ContractCode(
    val value: LedgerKeyContractCodeXdr
  ) : LedgerKeyXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.CONTRACT_CODE
  }

  data class ConfigSetting(
    val value: LedgerKeyConfigSettingXdr
  ) : LedgerKeyXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.CONFIG_SETTING
  }

  data class Ttl(
    val value: LedgerKeyTtlXdr
  ) : LedgerKeyXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.TTL
  }

  companion object {

    fun decode(reader: XdrReader): LedgerKeyXdr {
      val discriminant = LedgerEntryTypeXdr.decode(reader)
      return when (discriminant) {
        LedgerEntryTypeXdr.ACCOUNT -> {
          val value = LedgerKeyAccountXdr.decode(reader)
          Account(value)
        }
        LedgerEntryTypeXdr.TRUSTLINE -> {
          val value = LedgerKeyTrustLineXdr.decode(reader)
          TrustLine(value)
        }
        LedgerEntryTypeXdr.OFFER -> {
          val value = LedgerKeyOfferXdr.decode(reader)
          Offer(value)
        }
        LedgerEntryTypeXdr.DATA -> {
          val value = LedgerKeyDataXdr.decode(reader)
          Data(value)
        }
        LedgerEntryTypeXdr.CLAIMABLE_BALANCE -> {
          val value = LedgerKeyClaimableBalanceXdr.decode(reader)
          ClaimableBalance(value)
        }
        LedgerEntryTypeXdr.LIQUIDITY_POOL -> {
          val value = LedgerKeyLiquidityPoolXdr.decode(reader)
          LiquidityPool(value)
        }
        LedgerEntryTypeXdr.CONTRACT_DATA -> {
          val value = LedgerKeyContractDataXdr.decode(reader)
          ContractData(value)
        }
        LedgerEntryTypeXdr.CONTRACT_CODE -> {
          val value = LedgerKeyContractCodeXdr.decode(reader)
          ContractCode(value)
        }
        LedgerEntryTypeXdr.CONFIG_SETTING -> {
          val value = LedgerKeyConfigSettingXdr.decode(reader)
          ConfigSetting(value)
        }
        LedgerEntryTypeXdr.TTL -> {
          val value = LedgerKeyTtlXdr.decode(reader)
          Ttl(value)
        }
        else -> throw IllegalArgumentException("Unknown LedgerKeyXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Account -> {
        value.encode(writer)
      }
      is TrustLine -> {
        value.encode(writer)
      }
      is Offer -> {
        value.encode(writer)
      }
      is Data -> {
        value.encode(writer)
      }
      is ClaimableBalance -> {
        value.encode(writer)
      }
      is LiquidityPool -> {
        value.encode(writer)
      }
      is ContractData -> {
        value.encode(writer)
      }
      is ContractCode -> {
        value.encode(writer)
      }
      is ConfigSetting -> {
        value.encode(writer)
      }
      is Ttl -> {
        value.encode(writer)
      }
    }
  }
}
