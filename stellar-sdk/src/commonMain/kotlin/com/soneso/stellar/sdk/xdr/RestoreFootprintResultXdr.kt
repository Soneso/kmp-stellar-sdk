// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union RestoreFootprintResult switch (RestoreFootprintResultCode code)
 * {
 * case RESTORE_FOOTPRINT_SUCCESS:
 *     void;
 * case RESTORE_FOOTPRINT_MALFORMED:
 * case RESTORE_FOOTPRINT_RESOURCE_LIMIT_EXCEEDED:
 * case RESTORE_FOOTPRINT_INSUFFICIENT_REFUNDABLE_FEE:
 *     void;
 * };
 */
sealed class RestoreFootprintResultXdr {
  abstract val discriminant: RestoreFootprintResultCodeXdr

  data class Void(
    override val discriminant: RestoreFootprintResultCodeXdr
  ) : RestoreFootprintResultXdr()

  companion object {

    fun decode(reader: XdrReader): RestoreFootprintResultXdr {
      val discriminant = RestoreFootprintResultCodeXdr.decode(reader)
      return when (discriminant) {
        RestoreFootprintResultCodeXdr.RESTORE_FOOTPRINT_SUCCESS -> Void(discriminant)
        RestoreFootprintResultCodeXdr.RESTORE_FOOTPRINT_MALFORMED -> Void(discriminant)
        RestoreFootprintResultCodeXdr.RESTORE_FOOTPRINT_RESOURCE_LIMIT_EXCEEDED -> Void(discriminant)
        RestoreFootprintResultCodeXdr.RESTORE_FOOTPRINT_INSUFFICIENT_REFUNDABLE_FEE -> Void(discriminant)
        else -> throw IllegalArgumentException("Unknown RestoreFootprintResultXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
      is Void -> {}
    }
  }
}
