// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * struct AccountEntry
 * {
 *     AccountID accountID;      // master public key for this account
 *     int64 balance;            // in stroops
 *     SequenceNumber seqNum;    // last sequence number used for this account
 *     uint32 numSubEntries;     // number of sub-entries this account has
 *                               // drives the reserve
 *     AccountID* inflationDest; // Account to vote for during inflation
 *     uint32 flags;             // see AccountFlags
 * 
 *     string32 homeDomain; // can be used for reverse federation and memo lookup
 * 
 *     // fields used for signatures
 *     // thresholds stores unsigned bytes: [weight of master|low|medium|high]
 *     Thresholds thresholds;
 * 
 *     Signer signers<MAX_SIGNERS>; // possible signers for this account
 * 
 *     // reserved for future use
 *     union switch (int v)
 *     {
 *     case 0:
 *         void;
 *     case 1:
 *         AccountEntryExtensionV1 v1;
 *     }
 *     ext;
 * };
 */
data class AccountEntryXdr(
  /** master public key for this account */
  val accountId: AccountIDXdr,
  /** in stroops */
  val balance: Int64Xdr,
  /** last sequence number used for this account */
  val seqNum: SequenceNumberXdr,
  /** number of sub-entries this account has */
  val numSubEntries: Uint32Xdr,
  /**
   * drives the reserve
   * Account to vote for during inflation
   */
  val inflationDest: AccountIDXdr?,
  /** see AccountFlags */
  val flags: Uint32Xdr,
  /** can be used for reverse federation and memo lookup */
  val homeDomain: String32Xdr,
  /**
   * fields used for signatures
   * thresholds stores unsigned bytes: [weight of master|low|medium|high]
   */
  val thresholds: ThresholdsXdr,
  val signers: List<SignerXdr>,
  val ext: AccountEntryExtXdr
) {
  companion object {

    fun decode(reader: XdrReader): AccountEntryXdr {
      val accountId = AccountIDXdr.decode(reader)
      val balance = Int64Xdr.decode(reader)
      val seqNum = SequenceNumberXdr.decode(reader)
      val numSubEntries = Uint32Xdr.decode(reader)
      val inflationDest = if (reader.readBoolean()) AccountIDXdr.decode(reader) else null
      val flags = Uint32Xdr.decode(reader)
      val homeDomain = String32Xdr.decode(reader)
      val thresholds = ThresholdsXdr.decode(reader)
      val signers = List(reader.readInt()) { SignerXdr.decode(reader) }
      val ext = AccountEntryExtXdr.decode(reader)
      return AccountEntryXdr(accountId, balance, seqNum, numSubEntries, inflationDest, flags, homeDomain, thresholds, signers, ext)
    }
  }

  fun encode(writer: XdrWriter) {
    accountId.encode(writer)
    balance.encode(writer)
    seqNum.encode(writer)
    numSubEntries.encode(writer)
    if (inflationDest != null) {
      writer.writeBoolean(true)
      inflationDest.encode(writer)
    } else {
      writer.writeBoolean(false)
    }
    flags.encode(writer)
    homeDomain.encode(writer)
    thresholds.encode(writer)
    writer.writeInt(signers.size)
    signers.forEach { item ->
      item.encode(writer)
    }
    ext.encode(writer)
  }
}
