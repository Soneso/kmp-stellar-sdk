// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union EndSponsoringFutureReservesResult switch (
 *     EndSponsoringFutureReservesResultCode code)
 * {
 * case END_SPONSORING_FUTURE_RESERVES_SUCCESS:
 *     void;
 * case END_SPONSORING_FUTURE_RESERVES_NOT_SPONSORED:
 *     void;
 * };
 */
sealed class EndSponsoringFutureReservesResultXdr {
  abstract val discriminant: EndSponsoringFutureReservesResultCodeXdr

  data class Void(
    override val discriminant: EndSponsoringFutureReservesResultCodeXdr
  ) : EndSponsoringFutureReservesResultXdr()

  companion object {

    fun decode(reader: XdrReader): EndSponsoringFutureReservesResultXdr {
      val discriminant = EndSponsoringFutureReservesResultCodeXdr.decode(reader)
      return when (discriminant) {
        EndSponsoringFutureReservesResultCodeXdr.END_SPONSORING_FUTURE_RESERVES_SUCCESS -> Void(discriminant)
        EndSponsoringFutureReservesResultCodeXdr.END_SPONSORING_FUTURE_RESERVES_NOT_SPONSORED -> Void(discriminant)
        else -> throw IllegalArgumentException("Unknown EndSponsoringFutureReservesResultXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
      is Void -> {}
    }
  }
}
