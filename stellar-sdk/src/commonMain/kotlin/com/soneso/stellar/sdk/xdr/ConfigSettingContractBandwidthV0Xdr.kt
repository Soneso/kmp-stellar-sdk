// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * struct ConfigSettingContractBandwidthV0
 * {
 *     // Maximum sum of all transaction sizes in the ledger in bytes
 *     uint32 ledgerMaxTxsSizeBytes;
 *     // Maximum size in bytes for a transaction
 *     uint32 txMaxSizeBytes;
 * 
 *     // Fee for 1 KB of transaction size
 *     int64 feeTxSize1KB;
 * };
 */
data class ConfigSettingContractBandwidthV0Xdr(
  /** Maximum sum of all transaction sizes in the ledger in bytes */
  val ledgerMaxTxsSizeBytes: Uint32Xdr,
  /** Maximum size in bytes for a transaction */
  val txMaxSizeBytes: Uint32Xdr,
  /** Fee for 1 KB of transaction size */
  val feeTxSize1Kb: Int64Xdr
) {
  companion object {

    fun decode(reader: XdrReader): ConfigSettingContractBandwidthV0Xdr {
      val ledgerMaxTxsSizeBytes = Uint32Xdr.decode(reader)
      val txMaxSizeBytes = Uint32Xdr.decode(reader)
      val feeTxSize1Kb = Int64Xdr.decode(reader)
      return ConfigSettingContractBandwidthV0Xdr(ledgerMaxTxsSizeBytes, txMaxSizeBytes, feeTxSize1Kb)
    }
  }

  fun encode(writer: XdrWriter) {
    ledgerMaxTxsSizeBytes.encode(writer)
    txMaxSizeBytes.encode(writer)
    feeTxSize1Kb.encode(writer)
  }
}
