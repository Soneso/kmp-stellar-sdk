// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * struct OfferEntry
 * {
 *     AccountID sellerID;
 *     int64 offerID;
 *     Asset selling; // A
 *     Asset buying;  // B
 *     int64 amount;  // amount of A
 * 
 *     /* price for this offer:
 *         price of A in terms of B
 *         price=AmountB/AmountA=priceNumerator/priceDenominator
 *         price is after fees
 *     */
 *     Price price;
 *     uint32 flags; // see OfferEntryFlags
 * 
 *     // reserved for future use
 *     union switch (int v)
 *     {
 *     case 0:
 *         void;
 *     }
 *     ext;
 * };
 */
data class OfferEntryXdr(
  val sellerId: AccountIDXdr,
  val offerId: Int64Xdr,
  /** A */
  val selling: AssetXdr,
  /** B */
  val buying: AssetXdr,
  /** amount of A */
  val amount: Int64Xdr,
  val price: PriceXdr,
  /** see OfferEntryFlags */
  val flags: Uint32Xdr,
  val ext: OfferEntryExtXdr
) {
  companion object {

    fun decode(reader: XdrReader): OfferEntryXdr {
      val sellerId = AccountIDXdr.decode(reader)
      val offerId = Int64Xdr.decode(reader)
      val selling = AssetXdr.decode(reader)
      val buying = AssetXdr.decode(reader)
      val amount = Int64Xdr.decode(reader)
      val price = PriceXdr.decode(reader)
      val flags = Uint32Xdr.decode(reader)
      val ext = OfferEntryExtXdr.decode(reader)
      return OfferEntryXdr(sellerId, offerId, selling, buying, amount, price, flags, ext)
    }
  }

  fun encode(writer: XdrWriter) {
    sellerId.encode(writer)
    offerId.encode(writer)
    selling.encode(writer)
    buying.encode(writer)
    amount.encode(writer)
    price.encode(writer)
    flags.encode(writer)
    ext.encode(writer)
  }
}
