// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union InvokeHostFunctionResult switch (InvokeHostFunctionResultCode code)
 * {
 * case INVOKE_HOST_FUNCTION_SUCCESS:
 *     Hash success; // sha256(InvokeHostFunctionSuccessPreImage)
 * case INVOKE_HOST_FUNCTION_MALFORMED:
 * case INVOKE_HOST_FUNCTION_TRAPPED:
 * case INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED:
 * case INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED:
 * case INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE:
 *     void;
 * };
 */
sealed class InvokeHostFunctionResultXdr {
  abstract val discriminant: InvokeHostFunctionResultCodeXdr

  data class Success(
    val value: HashXdr
  ) : InvokeHostFunctionResultXdr() {
    override val discriminant: InvokeHostFunctionResultCodeXdr = InvokeHostFunctionResultCodeXdr.INVOKE_HOST_FUNCTION_SUCCESS
  }

  data object Void : InvokeHostFunctionResultXdr() {
    override val discriminant: InvokeHostFunctionResultCodeXdr = InvokeHostFunctionResultCodeXdr.INVOKE_HOST_FUNCTION_MALFORMED
  }

  companion object {

    fun decode(reader: XdrReader): InvokeHostFunctionResultXdr {
      val discriminant = InvokeHostFunctionResultCodeXdr.decode(reader)
      return when (discriminant) {
        InvokeHostFunctionResultCodeXdr.INVOKE_HOST_FUNCTION_SUCCESS -> {
          val value = HashXdr.decode(reader)
          Success(value)
        }
        InvokeHostFunctionResultCodeXdr.INVOKE_HOST_FUNCTION_MALFORMED -> Void
        InvokeHostFunctionResultCodeXdr.INVOKE_HOST_FUNCTION_TRAPPED -> Void
        InvokeHostFunctionResultCodeXdr.INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED -> Void
        InvokeHostFunctionResultCodeXdr.INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED -> Void
        InvokeHostFunctionResultCodeXdr.INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE -> Void
        else -> throw IllegalArgumentException("Unknown InvokeHostFunctionResultXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Success -> {
        value.encode(writer)
      }
      is Void -> {}
    }
  }
}
