// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union SignerKey switch (SignerKeyType type)
 * {
 * case SIGNER_KEY_TYPE_ED25519:
 *     uint256 ed25519;
 * case SIGNER_KEY_TYPE_PRE_AUTH_TX:
 *     /* SHA-256 Hash of TransactionSignaturePayload structure */
 *     uint256 preAuthTx;
 * case SIGNER_KEY_TYPE_HASH_X:
 *     /* Hash of random 256 bit preimage X */
 *     uint256 hashX;
 * case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD:
 *     struct
 *     {
 *         /* Public key that must sign the payload. */
 *         uint256 ed25519;
 *         /* Payload to be raw signed by ed25519. */
 *         opaque payload<64>;
 *     } ed25519SignedPayload;
 * };
 */
sealed class SignerKeyXdr {
  abstract val discriminant: SignerKeyTypeXdr

  data class Ed25519(
    val value: Uint256Xdr
  ) : SignerKeyXdr() {
    override val discriminant: SignerKeyTypeXdr = SignerKeyTypeXdr.SIGNER_KEY_TYPE_ED25519
  }

  data class PreAuthTx(
    val value: Uint256Xdr
  ) : SignerKeyXdr() {
    override val discriminant: SignerKeyTypeXdr = SignerKeyTypeXdr.SIGNER_KEY_TYPE_PRE_AUTH_TX
  }

  data class HashX(
    val value: Uint256Xdr
  ) : SignerKeyXdr() {
    override val discriminant: SignerKeyTypeXdr = SignerKeyTypeXdr.SIGNER_KEY_TYPE_HASH_X
  }

  data class Ed25519SignedPayload(
    val value: SignerKeyEd25519SignedPayloadXdr
  ) : SignerKeyXdr() {
    override val discriminant: SignerKeyTypeXdr = SignerKeyTypeXdr.SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD
  }

  companion object {

    fun decode(reader: XdrReader): SignerKeyXdr {
      val discriminant = SignerKeyTypeXdr.decode(reader)
      return when (discriminant) {
        SignerKeyTypeXdr.SIGNER_KEY_TYPE_ED25519 -> {
          val value = Uint256Xdr.decode(reader)
          Ed25519(value)
        }
        SignerKeyTypeXdr.SIGNER_KEY_TYPE_PRE_AUTH_TX -> {
          val value = Uint256Xdr.decode(reader)
          PreAuthTx(value)
        }
        SignerKeyTypeXdr.SIGNER_KEY_TYPE_HASH_X -> {
          val value = Uint256Xdr.decode(reader)
          HashX(value)
        }
        SignerKeyTypeXdr.SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD -> {
          val value = SignerKeyEd25519SignedPayloadXdr.decode(reader)
          Ed25519SignedPayload(value)
        }
        else -> throw IllegalArgumentException("Unknown SignerKeyXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Ed25519 -> {
        value.encode(writer)
      }
      is PreAuthTx -> {
        value.encode(writer)
      }
      is HashX -> {
        value.encode(writer)
      }
      is Ed25519SignedPayload -> {
        value.encode(writer)
      }
    }
  }
}
