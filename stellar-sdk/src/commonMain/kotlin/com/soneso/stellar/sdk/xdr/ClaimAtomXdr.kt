// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union ClaimAtom switch (ClaimAtomType type)
 * {
 * case CLAIM_ATOM_TYPE_V0:
 *     ClaimOfferAtomV0 v0;
 * case CLAIM_ATOM_TYPE_ORDER_BOOK:
 *     ClaimOfferAtom orderBook;
 * case CLAIM_ATOM_TYPE_LIQUIDITY_POOL:
 *     ClaimLiquidityAtom liquidityPool;
 * };
 */
sealed class ClaimAtomXdr {
  abstract val discriminant: ClaimAtomTypeXdr

  data class V0(
    val value: ClaimOfferAtomV0Xdr
  ) : ClaimAtomXdr() {
    override val discriminant: ClaimAtomTypeXdr = ClaimAtomTypeXdr.CLAIM_ATOM_TYPE_V0
  }

  data class OrderBook(
    val value: ClaimOfferAtomXdr
  ) : ClaimAtomXdr() {
    override val discriminant: ClaimAtomTypeXdr = ClaimAtomTypeXdr.CLAIM_ATOM_TYPE_ORDER_BOOK
  }

  data class LiquidityPool(
    val value: ClaimLiquidityAtomXdr
  ) : ClaimAtomXdr() {
    override val discriminant: ClaimAtomTypeXdr = ClaimAtomTypeXdr.CLAIM_ATOM_TYPE_LIQUIDITY_POOL
  }

  companion object {

    fun decode(reader: XdrReader): ClaimAtomXdr {
      val discriminant = ClaimAtomTypeXdr.decode(reader)
      return when (discriminant) {
        ClaimAtomTypeXdr.CLAIM_ATOM_TYPE_V0 -> {
          val value = ClaimOfferAtomV0Xdr.decode(reader)
          V0(value)
        }
        ClaimAtomTypeXdr.CLAIM_ATOM_TYPE_ORDER_BOOK -> {
          val value = ClaimOfferAtomXdr.decode(reader)
          OrderBook(value)
        }
        ClaimAtomTypeXdr.CLAIM_ATOM_TYPE_LIQUIDITY_POOL -> {
          val value = ClaimLiquidityAtomXdr.decode(reader)
          LiquidityPool(value)
        }
        else -> throw IllegalArgumentException("Unknown ClaimAtomXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is V0 -> {
        value.encode(writer)
      }
      is OrderBook -> {
        value.encode(writer)
      }
      is LiquidityPool -> {
        value.encode(writer)
      }
    }
  }
}
