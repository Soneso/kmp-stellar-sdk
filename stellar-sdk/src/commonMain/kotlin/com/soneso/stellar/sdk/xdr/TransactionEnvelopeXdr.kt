// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union TransactionEnvelope switch (EnvelopeType type)
 * {
 * case ENVELOPE_TYPE_TX_V0:
 *     TransactionV0Envelope v0;
 * case ENVELOPE_TYPE_TX:
 *     TransactionV1Envelope v1;
 * case ENVELOPE_TYPE_TX_FEE_BUMP:
 *     FeeBumpTransactionEnvelope feeBump;
 * };
 */
sealed class TransactionEnvelopeXdr {
  abstract val discriminant: EnvelopeTypeXdr

  data class V0(
    val value: TransactionV0EnvelopeXdr
  ) : TransactionEnvelopeXdr() {
    override val discriminant: EnvelopeTypeXdr = EnvelopeTypeXdr.ENVELOPE_TYPE_TX_V0
  }

  data class V1(
    val value: TransactionV1EnvelopeXdr
  ) : TransactionEnvelopeXdr() {
    override val discriminant: EnvelopeTypeXdr = EnvelopeTypeXdr.ENVELOPE_TYPE_TX
  }

  data class FeeBump(
    val value: FeeBumpTransactionEnvelopeXdr
  ) : TransactionEnvelopeXdr() {
    override val discriminant: EnvelopeTypeXdr = EnvelopeTypeXdr.ENVELOPE_TYPE_TX_FEE_BUMP
  }

  companion object {

    fun decode(reader: XdrReader): TransactionEnvelopeXdr {
      val discriminant = EnvelopeTypeXdr.decode(reader)
      return when (discriminant) {
        EnvelopeTypeXdr.ENVELOPE_TYPE_TX_V0 -> {
          val value = TransactionV0EnvelopeXdr.decode(reader)
          V0(value)
        }
        EnvelopeTypeXdr.ENVELOPE_TYPE_TX -> {
          val value = TransactionV1EnvelopeXdr.decode(reader)
          V1(value)
        }
        EnvelopeTypeXdr.ENVELOPE_TYPE_TX_FEE_BUMP -> {
          val value = FeeBumpTransactionEnvelopeXdr.decode(reader)
          FeeBump(value)
        }
        else -> throw IllegalArgumentException("Unknown TransactionEnvelopeXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is V0 -> {
        value.encode(writer)
      }
      is V1 -> {
        value.encode(writer)
      }
      is FeeBump -> {
        value.encode(writer)
      }
    }
  }
}
