// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union switch (EnvelopeType type)
 *     {
 *     // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0
 *     case ENVELOPE_TYPE_TX:
 *         Transaction tx;
 *     case ENVELOPE_TYPE_TX_FEE_BUMP:
 *         FeeBumpTransaction feeBump;
 *     }
 */
sealed class TransactionSignaturePayloadTaggedTransactionXdr {
  abstract val discriminant: EnvelopeTypeXdr

  /** Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0 */
  data class Tx(
    val value: TransactionXdr
  ) : TransactionSignaturePayloadTaggedTransactionXdr() {
    override val discriminant: EnvelopeTypeXdr = EnvelopeTypeXdr.ENVELOPE_TYPE_TX
  }

  data class FeeBump(
    val value: FeeBumpTransactionXdr
  ) : TransactionSignaturePayloadTaggedTransactionXdr() {
    override val discriminant: EnvelopeTypeXdr = EnvelopeTypeXdr.ENVELOPE_TYPE_TX_FEE_BUMP
  }

  companion object {

    fun decode(reader: XdrReader): TransactionSignaturePayloadTaggedTransactionXdr {
      val discriminant = EnvelopeTypeXdr.decode(reader)
      return when (discriminant) {
        EnvelopeTypeXdr.ENVELOPE_TYPE_TX -> {
          val value = TransactionXdr.decode(reader)
          Tx(value)
        }
        EnvelopeTypeXdr.ENVELOPE_TYPE_TX_FEE_BUMP -> {
          val value = FeeBumpTransactionXdr.decode(reader)
          FeeBump(value)
        }
        else -> throw IllegalArgumentException("Unknown TransactionSignaturePayloadTaggedTransactionXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Tx -> {
        value.encode(writer)
      }
      is FeeBump -> {
        value.encode(writer)
      }
    }
  }
}
