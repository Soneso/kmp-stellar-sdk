// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union ClawbackResult switch (ClawbackResultCode code)
 * {
 * case CLAWBACK_SUCCESS:
 *     void;
 * case CLAWBACK_MALFORMED:
 * case CLAWBACK_NOT_CLAWBACK_ENABLED:
 * case CLAWBACK_NO_TRUST:
 * case CLAWBACK_UNDERFUNDED:
 *     void;
 * };
 */
sealed class ClawbackResultXdr {
  abstract val discriminant: ClawbackResultCodeXdr

  data class Void(
    override val discriminant: ClawbackResultCodeXdr
  ) : ClawbackResultXdr()

  companion object {

    fun decode(reader: XdrReader): ClawbackResultXdr {
      val discriminant = ClawbackResultCodeXdr.decode(reader)
      return when (discriminant) {
        ClawbackResultCodeXdr.CLAWBACK_SUCCESS -> Void(discriminant)
        ClawbackResultCodeXdr.CLAWBACK_MALFORMED -> Void(discriminant)
        ClawbackResultCodeXdr.CLAWBACK_NOT_CLAWBACK_ENABLED -> Void(discriminant)
        ClawbackResultCodeXdr.CLAWBACK_NO_TRUST -> Void(discriminant)
        ClawbackResultCodeXdr.CLAWBACK_UNDERFUNDED -> Void(discriminant)
        else -> throw IllegalArgumentException("Unknown ClawbackResultXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
    }
  }
}
