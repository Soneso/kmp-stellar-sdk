// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * struct ClaimableBalanceEntry
 * {
 *     // Unique identifier for this ClaimableBalanceEntry
 *     ClaimableBalanceID balanceID;
 * 
 *     // List of claimants with associated predicate
 *     Claimant claimants<10>;
 * 
 *     // Any asset including native
 *     Asset asset;
 * 
 *     // Amount of asset
 *     int64 amount;
 * 
 *     // reserved for future use
 *     union switch (int v)
 *     {
 *     case 0:
 *         void;
 *     case 1:
 *         ClaimableBalanceEntryExtensionV1 v1;
 *     }
 *     ext;
 * };
 */
data class ClaimableBalanceEntryXdr(
  /** Unique identifier for this ClaimableBalanceEntry */
  val balanceId: ClaimableBalanceIDXdr,
  val claimants: List<ClaimantXdr>,
  /** Any asset including native */
  val asset: AssetXdr,
  /** Amount of asset */
  val amount: Int64Xdr,
  val ext: ClaimableBalanceEntryExtXdr
) {
  companion object {

    fun decode(reader: XdrReader): ClaimableBalanceEntryXdr {
      val balanceId = ClaimableBalanceIDXdr.decode(reader)
      val claimants = List(reader.readInt()) { ClaimantXdr.decode(reader) }
      val asset = AssetXdr.decode(reader)
      val amount = Int64Xdr.decode(reader)
      val ext = ClaimableBalanceEntryExtXdr.decode(reader)
      return ClaimableBalanceEntryXdr(balanceId, claimants, asset, amount, ext)
    }
  }

  fun encode(writer: XdrWriter) {
    balanceId.encode(writer)
    writer.writeInt(claimants.size)
    claimants.forEach { item ->
      item.encode(writer)
    }
    asset.encode(writer)
    amount.encode(writer)
    ext.encode(writer)
  }
}
