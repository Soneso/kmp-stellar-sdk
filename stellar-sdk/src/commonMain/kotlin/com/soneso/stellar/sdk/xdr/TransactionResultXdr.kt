// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * struct TransactionResult
 * {
 *     int64 feeCharged; // actual fee charged for the transaction
 * 
 *     union switch (TransactionResultCode code)
 *     {
 *     case txFEE_BUMP_INNER_SUCCESS:
 *     case txFEE_BUMP_INNER_FAILED:
 *         InnerTransactionResultPair innerResultPair;
 *     case txSUCCESS:
 *     case txFAILED:
 *         OperationResult results<>;
 *     case txTOO_EARLY:
 *     case txTOO_LATE:
 *     case txMISSING_OPERATION:
 *     case txBAD_SEQ:
 *     case txBAD_AUTH:
 *     case txINSUFFICIENT_BALANCE:
 *     case txNO_ACCOUNT:
 *     case txINSUFFICIENT_FEE:
 *     case txBAD_AUTH_EXTRA:
 *     case txINTERNAL_ERROR:
 *     case txNOT_SUPPORTED:
 *     // case txFEE_BUMP_INNER_FAILED: handled above
 *     case txBAD_SPONSORSHIP:
 *     case txBAD_MIN_SEQ_AGE_OR_GAP:
 *     case txMALFORMED:
 *     case txSOROBAN_INVALID:
 *         void;
 *     }
 *     result;
 * 
 *     // reserved for future use
 *     union switch (int v)
 *     {
 *     case 0:
 *         void;
 *     }
 *     ext;
 * };
 */
data class TransactionResultXdr(
  /** actual fee charged for the transaction */
  val feeCharged: Int64Xdr,
  val result: TransactionResultResultXdr,
  val ext: TransactionResultExtXdr
) {
  companion object {

    fun decode(reader: XdrReader): TransactionResultXdr {
      val feeCharged = Int64Xdr.decode(reader)
      val result = TransactionResultResultXdr.decode(reader)
      val ext = TransactionResultExtXdr.decode(reader)
      return TransactionResultXdr(feeCharged, result, ext)
    }
  }

  fun encode(writer: XdrWriter) {
    feeCharged.encode(writer)
    result.encode(writer)
    ext.encode(writer)
  }
}
