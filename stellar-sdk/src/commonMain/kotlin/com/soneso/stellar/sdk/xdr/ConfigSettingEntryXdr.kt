// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union ConfigSettingEntry switch (ConfigSettingID configSettingID)
 * {
 * case CONFIG_SETTING_CONTRACT_MAX_SIZE_BYTES:
 *     uint32 contractMaxSizeBytes;
 * case CONFIG_SETTING_CONTRACT_COMPUTE_V0:
 *     ConfigSettingContractComputeV0 contractCompute;
 * case CONFIG_SETTING_CONTRACT_LEDGER_COST_V0:
 *     ConfigSettingContractLedgerCostV0 contractLedgerCost;
 * case CONFIG_SETTING_CONTRACT_HISTORICAL_DATA_V0:
 *     ConfigSettingContractHistoricalDataV0 contractHistoricalData;
 * case CONFIG_SETTING_CONTRACT_EVENTS_V0:
 *     ConfigSettingContractEventsV0 contractEvents;
 * case CONFIG_SETTING_CONTRACT_BANDWIDTH_V0:
 *     ConfigSettingContractBandwidthV0 contractBandwidth;
 * case CONFIG_SETTING_CONTRACT_COST_PARAMS_CPU_INSTRUCTIONS:
 *     ContractCostParams contractCostParamsCpuInsns;
 * case CONFIG_SETTING_CONTRACT_COST_PARAMS_MEMORY_BYTES:
 *     ContractCostParams contractCostParamsMemBytes;
 * case CONFIG_SETTING_CONTRACT_DATA_KEY_SIZE_BYTES:
 *     uint32 contractDataKeySizeBytes;
 * case CONFIG_SETTING_CONTRACT_DATA_ENTRY_SIZE_BYTES:
 *     uint32 contractDataEntrySizeBytes;
 * case CONFIG_SETTING_STATE_ARCHIVAL:
 *     StateArchivalSettings stateArchivalSettings;
 * case CONFIG_SETTING_CONTRACT_EXECUTION_LANES:
 *     ConfigSettingContractExecutionLanesV0 contractExecutionLanes;
 * case CONFIG_SETTING_LIVE_SOROBAN_STATE_SIZE_WINDOW:
 *     uint64 liveSorobanStateSizeWindow<>;
 * case CONFIG_SETTING_EVICTION_ITERATOR:
 *     EvictionIterator evictionIterator;
 * case CONFIG_SETTING_CONTRACT_PARALLEL_COMPUTE_V0:
 *     ConfigSettingContractParallelComputeV0 contractParallelCompute;
 * case CONFIG_SETTING_CONTRACT_LEDGER_COST_EXT_V0:
 *     ConfigSettingContractLedgerCostExtV0 contractLedgerCostExt;
 * case CONFIG_SETTING_SCP_TIMING:
 *     ConfigSettingSCPTiming contractSCPTiming;
 * };
 */
sealed class ConfigSettingEntryXdr {
  abstract val discriminant: ConfigSettingIDXdr

  data class ContractMaxSizeBytes(
    val value: Uint32Xdr
  ) : ConfigSettingEntryXdr() {
    override val discriminant: ConfigSettingIDXdr = ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_MAX_SIZE_BYTES
  }

  data class ContractCompute(
    val value: ConfigSettingContractComputeV0Xdr
  ) : ConfigSettingEntryXdr() {
    override val discriminant: ConfigSettingIDXdr = ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_COMPUTE_V0
  }

  data class ContractLedgerCost(
    val value: ConfigSettingContractLedgerCostV0Xdr
  ) : ConfigSettingEntryXdr() {
    override val discriminant: ConfigSettingIDXdr = ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_LEDGER_COST_V0
  }

  data class ContractHistoricalData(
    val value: ConfigSettingContractHistoricalDataV0Xdr
  ) : ConfigSettingEntryXdr() {
    override val discriminant: ConfigSettingIDXdr = ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_HISTORICAL_DATA_V0
  }

  data class ContractEvents(
    val value: ConfigSettingContractEventsV0Xdr
  ) : ConfigSettingEntryXdr() {
    override val discriminant: ConfigSettingIDXdr = ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_EVENTS_V0
  }

  data class ContractBandwidth(
    val value: ConfigSettingContractBandwidthV0Xdr
  ) : ConfigSettingEntryXdr() {
    override val discriminant: ConfigSettingIDXdr = ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_BANDWIDTH_V0
  }

  data class ContractCostParamsCpuInsns(
    val value: ContractCostParamsXdr
  ) : ConfigSettingEntryXdr() {
    override val discriminant: ConfigSettingIDXdr = ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_COST_PARAMS_CPU_INSTRUCTIONS
  }

  data class ContractCostParamsMemBytes(
    val value: ContractCostParamsXdr
  ) : ConfigSettingEntryXdr() {
    override val discriminant: ConfigSettingIDXdr = ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_COST_PARAMS_MEMORY_BYTES
  }

  data class ContractDataKeySizeBytes(
    val value: Uint32Xdr
  ) : ConfigSettingEntryXdr() {
    override val discriminant: ConfigSettingIDXdr = ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_DATA_KEY_SIZE_BYTES
  }

  data class ContractDataEntrySizeBytes(
    val value: Uint32Xdr
  ) : ConfigSettingEntryXdr() {
    override val discriminant: ConfigSettingIDXdr = ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_DATA_ENTRY_SIZE_BYTES
  }

  data class StateArchivalSettings(
    val value: StateArchivalSettingsXdr
  ) : ConfigSettingEntryXdr() {
    override val discriminant: ConfigSettingIDXdr = ConfigSettingIDXdr.CONFIG_SETTING_STATE_ARCHIVAL
  }

  data class ContractExecutionLanes(
    val value: ConfigSettingContractExecutionLanesV0Xdr
  ) : ConfigSettingEntryXdr() {
    override val discriminant: ConfigSettingIDXdr = ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_EXECUTION_LANES
  }

  data class LiveSorobanStateSizeWindow(
    val value: List<Uint64Xdr>
  ) : ConfigSettingEntryXdr() {
    override val discriminant: ConfigSettingIDXdr = ConfigSettingIDXdr.CONFIG_SETTING_LIVE_SOROBAN_STATE_SIZE_WINDOW
  }

  data class EvictionIterator(
    val value: EvictionIteratorXdr
  ) : ConfigSettingEntryXdr() {
    override val discriminant: ConfigSettingIDXdr = ConfigSettingIDXdr.CONFIG_SETTING_EVICTION_ITERATOR
  }

  data class ContractParallelCompute(
    val value: ConfigSettingContractParallelComputeV0Xdr
  ) : ConfigSettingEntryXdr() {
    override val discriminant: ConfigSettingIDXdr = ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_PARALLEL_COMPUTE_V0
  }

  data class ContractLedgerCostExt(
    val value: ConfigSettingContractLedgerCostExtV0Xdr
  ) : ConfigSettingEntryXdr() {
    override val discriminant: ConfigSettingIDXdr = ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_LEDGER_COST_EXT_V0
  }

  data class ContractSCPTiming(
    val value: ConfigSettingSCPTimingXdr
  ) : ConfigSettingEntryXdr() {
    override val discriminant: ConfigSettingIDXdr = ConfigSettingIDXdr.CONFIG_SETTING_SCP_TIMING
  }

  companion object {

    fun decode(reader: XdrReader): ConfigSettingEntryXdr {
      val discriminant = ConfigSettingIDXdr.decode(reader)
      return when (discriminant) {
        ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_MAX_SIZE_BYTES -> {
          val value = Uint32Xdr.decode(reader)
          ContractMaxSizeBytes(value)
        }
        ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_COMPUTE_V0 -> {
          val value = ConfigSettingContractComputeV0Xdr.decode(reader)
          ContractCompute(value)
        }
        ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_LEDGER_COST_V0 -> {
          val value = ConfigSettingContractLedgerCostV0Xdr.decode(reader)
          ContractLedgerCost(value)
        }
        ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_HISTORICAL_DATA_V0 -> {
          val value = ConfigSettingContractHistoricalDataV0Xdr.decode(reader)
          ContractHistoricalData(value)
        }
        ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_EVENTS_V0 -> {
          val value = ConfigSettingContractEventsV0Xdr.decode(reader)
          ContractEvents(value)
        }
        ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_BANDWIDTH_V0 -> {
          val value = ConfigSettingContractBandwidthV0Xdr.decode(reader)
          ContractBandwidth(value)
        }
        ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_COST_PARAMS_CPU_INSTRUCTIONS -> {
          val value = ContractCostParamsXdr.decode(reader)
          ContractCostParamsCpuInsns(value)
        }
        ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_COST_PARAMS_MEMORY_BYTES -> {
          val value = ContractCostParamsXdr.decode(reader)
          ContractCostParamsMemBytes(value)
        }
        ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_DATA_KEY_SIZE_BYTES -> {
          val value = Uint32Xdr.decode(reader)
          ContractDataKeySizeBytes(value)
        }
        ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_DATA_ENTRY_SIZE_BYTES -> {
          val value = Uint32Xdr.decode(reader)
          ContractDataEntrySizeBytes(value)
        }
        ConfigSettingIDXdr.CONFIG_SETTING_STATE_ARCHIVAL -> {
          val value = StateArchivalSettingsXdr.decode(reader)
          StateArchivalSettings(value)
        }
        ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_EXECUTION_LANES -> {
          val value = ConfigSettingContractExecutionLanesV0Xdr.decode(reader)
          ContractExecutionLanes(value)
        }
        ConfigSettingIDXdr.CONFIG_SETTING_LIVE_SOROBAN_STATE_SIZE_WINDOW -> {
          val value = List(reader.readInt()) { Uint64Xdr.decode(reader) }
          LiveSorobanStateSizeWindow(value)
        }
        ConfigSettingIDXdr.CONFIG_SETTING_EVICTION_ITERATOR -> {
          val value = EvictionIteratorXdr.decode(reader)
          EvictionIterator(value)
        }
        ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_PARALLEL_COMPUTE_V0 -> {
          val value = ConfigSettingContractParallelComputeV0Xdr.decode(reader)
          ContractParallelCompute(value)
        }
        ConfigSettingIDXdr.CONFIG_SETTING_CONTRACT_LEDGER_COST_EXT_V0 -> {
          val value = ConfigSettingContractLedgerCostExtV0Xdr.decode(reader)
          ContractLedgerCostExt(value)
        }
        ConfigSettingIDXdr.CONFIG_SETTING_SCP_TIMING -> {
          val value = ConfigSettingSCPTimingXdr.decode(reader)
          ContractSCPTiming(value)
        }
        else -> throw IllegalArgumentException("Unknown ConfigSettingEntryXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is ContractMaxSizeBytes -> {
        value.encode(writer)
      }
      is ContractCompute -> {
        value.encode(writer)
      }
      is ContractLedgerCost -> {
        value.encode(writer)
      }
      is ContractHistoricalData -> {
        value.encode(writer)
      }
      is ContractEvents -> {
        value.encode(writer)
      }
      is ContractBandwidth -> {
        value.encode(writer)
      }
      is ContractCostParamsCpuInsns -> {
        value.encode(writer)
      }
      is ContractCostParamsMemBytes -> {
        value.encode(writer)
      }
      is ContractDataKeySizeBytes -> {
        value.encode(writer)
      }
      is ContractDataEntrySizeBytes -> {
        value.encode(writer)
      }
      is StateArchivalSettings -> {
        value.encode(writer)
      }
      is ContractExecutionLanes -> {
        value.encode(writer)
      }
      is LiveSorobanStateSizeWindow -> {
        writer.writeInt(value.size)
        value.forEach { item ->
          item.encode(writer)
        }
      }
      is EvictionIterator -> {
        value.encode(writer)
      }
      is ContractParallelCompute -> {
        value.encode(writer)
      }
      is ContractLedgerCostExt -> {
        value.encode(writer)
      }
      is ContractSCPTiming -> {
        value.encode(writer)
      }
    }
  }
}
