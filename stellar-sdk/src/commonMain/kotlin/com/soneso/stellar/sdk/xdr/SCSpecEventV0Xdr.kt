// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * struct SCSpecEventV0
 * {
 *     string doc<SC_SPEC_DOC_LIMIT>;
 *     string lib<80>;
 *     SCSymbol name;
 *     SCSymbol prefixTopics<2>;
 *     SCSpecEventParamV0 params<50>;
 *     SCSpecEventDataFormat dataFormat;
 * };
 */
data class SCSpecEventV0Xdr(
  val doc: String,
  val lib: String,
  val name: SCSymbolXdr,
  val prefixTopics: List<SCSymbolXdr>,
  val params: List<SCSpecEventParamV0Xdr>,
  val dataFormat: SCSpecEventDataFormatXdr
) {
  companion object {

    fun decode(reader: XdrReader): SCSpecEventV0Xdr {
      val doc = reader.readString()
      val lib = reader.readString()
      val name = SCSymbolXdr.decode(reader)
      val prefixTopics = List(reader.readInt()) { SCSymbolXdr.decode(reader) }
      val params = List(reader.readInt()) { SCSpecEventParamV0Xdr.decode(reader) }
      val dataFormat = SCSpecEventDataFormatXdr.decode(reader)
      return SCSpecEventV0Xdr(doc, lib, name, prefixTopics, params, dataFormat)
    }
  }

  fun encode(writer: XdrWriter) {
    writer.writeString(doc)
    writer.writeString(lib)
    name.encode(writer)
    writer.writeInt(prefixTopics.size)
    prefixTopics.forEach { item ->
      item.encode(writer)
    }
    writer.writeInt(params.size)
    params.forEach { item ->
      item.encode(writer)
    }
    dataFormat.encode(writer)
  }
}
