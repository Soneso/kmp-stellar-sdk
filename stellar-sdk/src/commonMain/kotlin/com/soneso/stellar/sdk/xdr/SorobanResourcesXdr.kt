// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * struct SorobanResources
 * {
 *     // The ledger footprint of the transaction.
 *     LedgerFootprint footprint;
 *     // The maximum number of instructions this transaction can use
 *     uint32 instructions;
 * 
 *     // The maximum number of bytes this transaction can read from disk backed entries
 *     uint32 diskReadBytes;
 *     // The maximum number of bytes this transaction can write to ledger
 *     uint32 writeBytes;
 * };
 */
data class SorobanResourcesXdr(
  /** The ledger footprint of the transaction. */
  val footprint: LedgerFootprintXdr,
  /** The maximum number of instructions this transaction can use */
  val instructions: Uint32Xdr,
  /** The maximum number of bytes this transaction can read from disk backed entries */
  val diskReadBytes: Uint32Xdr,
  /** The maximum number of bytes this transaction can write to ledger */
  val writeBytes: Uint32Xdr
) {
  companion object {

    fun decode(reader: XdrReader): SorobanResourcesXdr {
      val footprint = LedgerFootprintXdr.decode(reader)
      val instructions = Uint32Xdr.decode(reader)
      val diskReadBytes = Uint32Xdr.decode(reader)
      val writeBytes = Uint32Xdr.decode(reader)
      return SorobanResourcesXdr(footprint, instructions, diskReadBytes, writeBytes)
    }
  }

  fun encode(writer: XdrWriter) {
    footprint.encode(writer)
    instructions.encode(writer)
    diskReadBytes.encode(writer)
    writeBytes.encode(writer)
  }
}
