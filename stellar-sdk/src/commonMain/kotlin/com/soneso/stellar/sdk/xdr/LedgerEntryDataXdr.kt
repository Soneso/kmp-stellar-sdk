// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union switch (LedgerEntryType type)
 *     {
 *     case ACCOUNT:
 *         AccountEntry account;
 *     case TRUSTLINE:
 *         TrustLineEntry trustLine;
 *     case OFFER:
 *         OfferEntry offer;
 *     case DATA:
 *         DataEntry data;
 *     case CLAIMABLE_BALANCE:
 *         ClaimableBalanceEntry claimableBalance;
 *     case LIQUIDITY_POOL:
 *         LiquidityPoolEntry liquidityPool;
 *     case CONTRACT_DATA:
 *         ContractDataEntry contractData;
 *     case CONTRACT_CODE:
 *         ContractCodeEntry contractCode;
 *     case CONFIG_SETTING:
 *         ConfigSettingEntry configSetting;
 *     case TTL:
 *         TTLEntry ttl;
 *     }
 */
sealed class LedgerEntryDataXdr {
  abstract val discriminant: LedgerEntryTypeXdr

  data class Account(
    val value: AccountEntryXdr
  ) : LedgerEntryDataXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.ACCOUNT
  }

  data class TrustLine(
    val value: TrustLineEntryXdr
  ) : LedgerEntryDataXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.TRUSTLINE
  }

  data class Offer(
    val value: OfferEntryXdr
  ) : LedgerEntryDataXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.OFFER
  }

  data class Data(
    val value: DataEntryXdr
  ) : LedgerEntryDataXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.DATA
  }

  data class ClaimableBalance(
    val value: ClaimableBalanceEntryXdr
  ) : LedgerEntryDataXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.CLAIMABLE_BALANCE
  }

  data class LiquidityPool(
    val value: LiquidityPoolEntryXdr
  ) : LedgerEntryDataXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.LIQUIDITY_POOL
  }

  data class ContractData(
    val value: ContractDataEntryXdr
  ) : LedgerEntryDataXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.CONTRACT_DATA
  }

  data class ContractCode(
    val value: ContractCodeEntryXdr
  ) : LedgerEntryDataXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.CONTRACT_CODE
  }

  data class ConfigSetting(
    val value: ConfigSettingEntryXdr
  ) : LedgerEntryDataXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.CONFIG_SETTING
  }

  data class Ttl(
    val value: TTLEntryXdr
  ) : LedgerEntryDataXdr() {
    override val discriminant: LedgerEntryTypeXdr = LedgerEntryTypeXdr.TTL
  }

  companion object {

    fun decode(reader: XdrReader): LedgerEntryDataXdr {
      val discriminant = LedgerEntryTypeXdr.decode(reader)
      return when (discriminant) {
        LedgerEntryTypeXdr.ACCOUNT -> {
          val value = AccountEntryXdr.decode(reader)
          Account(value)
        }
        LedgerEntryTypeXdr.TRUSTLINE -> {
          val value = TrustLineEntryXdr.decode(reader)
          TrustLine(value)
        }
        LedgerEntryTypeXdr.OFFER -> {
          val value = OfferEntryXdr.decode(reader)
          Offer(value)
        }
        LedgerEntryTypeXdr.DATA -> {
          val value = DataEntryXdr.decode(reader)
          Data(value)
        }
        LedgerEntryTypeXdr.CLAIMABLE_BALANCE -> {
          val value = ClaimableBalanceEntryXdr.decode(reader)
          ClaimableBalance(value)
        }
        LedgerEntryTypeXdr.LIQUIDITY_POOL -> {
          val value = LiquidityPoolEntryXdr.decode(reader)
          LiquidityPool(value)
        }
        LedgerEntryTypeXdr.CONTRACT_DATA -> {
          val value = ContractDataEntryXdr.decode(reader)
          ContractData(value)
        }
        LedgerEntryTypeXdr.CONTRACT_CODE -> {
          val value = ContractCodeEntryXdr.decode(reader)
          ContractCode(value)
        }
        LedgerEntryTypeXdr.CONFIG_SETTING -> {
          val value = ConfigSettingEntryXdr.decode(reader)
          ConfigSetting(value)
        }
        LedgerEntryTypeXdr.TTL -> {
          val value = TTLEntryXdr.decode(reader)
          Ttl(value)
        }
        else -> throw IllegalArgumentException("Unknown LedgerEntryDataXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Account -> {
        value.encode(writer)
      }
      is TrustLine -> {
        value.encode(writer)
      }
      is Offer -> {
        value.encode(writer)
      }
      is Data -> {
        value.encode(writer)
      }
      is ClaimableBalance -> {
        value.encode(writer)
      }
      is LiquidityPool -> {
        value.encode(writer)
      }
      is ContractData -> {
        value.encode(writer)
      }
      is ContractCode -> {
        value.encode(writer)
      }
      is ConfigSetting -> {
        value.encode(writer)
      }
      is Ttl -> {
        value.encode(writer)
      }
    }
  }
}
