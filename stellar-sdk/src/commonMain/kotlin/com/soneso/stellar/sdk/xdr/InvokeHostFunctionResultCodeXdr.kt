// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * enum InvokeHostFunctionResultCode
 * {
 *     // codes considered as "success" for the operation
 *     INVOKE_HOST_FUNCTION_SUCCESS = 0,
 * 
 *     // codes considered as "failure" for the operation
 *     INVOKE_HOST_FUNCTION_MALFORMED = -1,
 *     INVOKE_HOST_FUNCTION_TRAPPED = -2,
 *     INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED = -3,
 *     INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED = -4,
 *     INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE = -5
 * };
 */
enum class InvokeHostFunctionResultCodeXdr(val value: Int) {
  /** codes considered as "success" for the operation */
  INVOKE_HOST_FUNCTION_SUCCESS(0),
  /** codes considered as "failure" for the operation */
  INVOKE_HOST_FUNCTION_MALFORMED(-1),
  INVOKE_HOST_FUNCTION_TRAPPED(-2),
  INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED(-3),
  INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED(-4),
  INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE(-5);

  companion object {

    fun decode(reader: XdrReader): InvokeHostFunctionResultCodeXdr {
      val value = reader.readInt()
      return entries.find { it.value == value }
        ?: throw IllegalArgumentException("Unknown InvokeHostFunctionResultCodeXdr value: $value")
    }
  }

  fun encode(writer: XdrWriter) {
    writer.writeInt(value)
  }
}
