// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * struct TimeSlicedNodeData
 * {
 *     uint32 addedAuthenticatedPeers;
 *     uint32 droppedAuthenticatedPeers;
 *     uint32 totalInboundPeerCount;
 *     uint32 totalOutboundPeerCount;
 * 
 *     // SCP stats
 *     uint32 p75SCPFirstToSelfLatencyMs;
 *     uint32 p75SCPSelfToOtherLatencyMs;
 * 
 *     // How many times the node lost sync in the time slice
 *     uint32 lostSyncCount;
 * 
 *     // Config data
 *     bool isValidator;
 *     uint32 maxInboundPeerCount;
 *     uint32 maxOutboundPeerCount;
 * };
 */
data class TimeSlicedNodeDataXdr(
  val addedAuthenticatedPeers: Uint32Xdr,
  val droppedAuthenticatedPeers: Uint32Xdr,
  val totalInboundPeerCount: Uint32Xdr,
  val totalOutboundPeerCount: Uint32Xdr,
  /** SCP stats */
  val p75ScpFirstToSelfLatencyMs: Uint32Xdr,
  val p75ScpSelfToOtherLatencyMs: Uint32Xdr,
  /** How many times the node lost sync in the time slice */
  val lostSyncCount: Uint32Xdr,
  /** Config data */
  val isValidator: Boolean,
  val maxInboundPeerCount: Uint32Xdr,
  val maxOutboundPeerCount: Uint32Xdr
) {
  companion object {

    fun decode(reader: XdrReader): TimeSlicedNodeDataXdr {
      val addedAuthenticatedPeers = Uint32Xdr.decode(reader)
      val droppedAuthenticatedPeers = Uint32Xdr.decode(reader)
      val totalInboundPeerCount = Uint32Xdr.decode(reader)
      val totalOutboundPeerCount = Uint32Xdr.decode(reader)
      val p75ScpFirstToSelfLatencyMs = Uint32Xdr.decode(reader)
      val p75ScpSelfToOtherLatencyMs = Uint32Xdr.decode(reader)
      val lostSyncCount = Uint32Xdr.decode(reader)
      val isValidator = reader.readBoolean()
      val maxInboundPeerCount = Uint32Xdr.decode(reader)
      val maxOutboundPeerCount = Uint32Xdr.decode(reader)
      return TimeSlicedNodeDataXdr(addedAuthenticatedPeers, droppedAuthenticatedPeers, totalInboundPeerCount, totalOutboundPeerCount, p75ScpFirstToSelfLatencyMs, p75ScpSelfToOtherLatencyMs, lostSyncCount, isValidator, maxInboundPeerCount, maxOutboundPeerCount)
    }
  }

  fun encode(writer: XdrWriter) {
    addedAuthenticatedPeers.encode(writer)
    droppedAuthenticatedPeers.encode(writer)
    totalInboundPeerCount.encode(writer)
    totalOutboundPeerCount.encode(writer)
    p75ScpFirstToSelfLatencyMs.encode(writer)
    p75ScpSelfToOtherLatencyMs.encode(writer)
    lostSyncCount.encode(writer)
    writer.writeBoolean(isValidator)
    maxInboundPeerCount.encode(writer)
    maxOutboundPeerCount.encode(writer)
  }
}
