// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union HotArchiveBucketEntry switch (HotArchiveBucketEntryType type)
 * {
 * case HOT_ARCHIVE_ARCHIVED:
 *     LedgerEntry archivedEntry;
 * 
 * case HOT_ARCHIVE_LIVE:
 *     LedgerKey key;
 * case HOT_ARCHIVE_METAENTRY:
 *     BucketMetadata metaEntry;
 * };
 */
sealed class HotArchiveBucketEntryXdr {
  abstract val discriminant: HotArchiveBucketEntryTypeXdr

  data class ArchivedEntry(
    val value: LedgerEntryXdr
  ) : HotArchiveBucketEntryXdr() {
    override val discriminant: HotArchiveBucketEntryTypeXdr = HotArchiveBucketEntryTypeXdr.HOT_ARCHIVE_ARCHIVED
  }

  data class Key(
    val value: LedgerKeyXdr
  ) : HotArchiveBucketEntryXdr() {
    override val discriminant: HotArchiveBucketEntryTypeXdr = HotArchiveBucketEntryTypeXdr.HOT_ARCHIVE_LIVE
  }

  data class MetaEntry(
    val value: BucketMetadataXdr
  ) : HotArchiveBucketEntryXdr() {
    override val discriminant: HotArchiveBucketEntryTypeXdr = HotArchiveBucketEntryTypeXdr.HOT_ARCHIVE_METAENTRY
  }

  companion object {

    fun decode(reader: XdrReader): HotArchiveBucketEntryXdr {
      val discriminant = HotArchiveBucketEntryTypeXdr.decode(reader)
      return when (discriminant) {
        HotArchiveBucketEntryTypeXdr.HOT_ARCHIVE_ARCHIVED -> {
          val value = LedgerEntryXdr.decode(reader)
          ArchivedEntry(value)
        }
        HotArchiveBucketEntryTypeXdr.HOT_ARCHIVE_LIVE -> {
          val value = LedgerKeyXdr.decode(reader)
          Key(value)
        }
        HotArchiveBucketEntryTypeXdr.HOT_ARCHIVE_METAENTRY -> {
          val value = BucketMetadataXdr.decode(reader)
          MetaEntry(value)
        }
        else -> throw IllegalArgumentException("Unknown HotArchiveBucketEntryXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is ArchivedEntry -> {
        value.encode(writer)
      }
      is Key -> {
        value.encode(writer)
      }
      is MetaEntry -> {
        value.encode(writer)
      }
    }
  }
}
