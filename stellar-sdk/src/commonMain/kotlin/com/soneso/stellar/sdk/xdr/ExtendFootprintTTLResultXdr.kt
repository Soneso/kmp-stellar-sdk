// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union ExtendFootprintTTLResult switch (ExtendFootprintTTLResultCode code)
 * {
 * case EXTEND_FOOTPRINT_TTL_SUCCESS:
 *     void;
 * case EXTEND_FOOTPRINT_TTL_MALFORMED:
 * case EXTEND_FOOTPRINT_TTL_RESOURCE_LIMIT_EXCEEDED:
 * case EXTEND_FOOTPRINT_TTL_INSUFFICIENT_REFUNDABLE_FEE:
 *     void;
 * };
 */
sealed class ExtendFootprintTTLResultXdr {
  abstract val discriminant: ExtendFootprintTTLResultCodeXdr

  data class Void(
    override val discriminant: ExtendFootprintTTLResultCodeXdr
  ) : ExtendFootprintTTLResultXdr()

  companion object {

    fun decode(reader: XdrReader): ExtendFootprintTTLResultXdr {
      val discriminant = ExtendFootprintTTLResultCodeXdr.decode(reader)
      return when (discriminant) {
        ExtendFootprintTTLResultCodeXdr.EXTEND_FOOTPRINT_TTL_SUCCESS -> Void(discriminant)
        ExtendFootprintTTLResultCodeXdr.EXTEND_FOOTPRINT_TTL_MALFORMED -> Void(discriminant)
        ExtendFootprintTTLResultCodeXdr.EXTEND_FOOTPRINT_TTL_RESOURCE_LIMIT_EXCEEDED -> Void(discriminant)
        ExtendFootprintTTLResultCodeXdr.EXTEND_FOOTPRINT_TTL_INSUFFICIENT_REFUNDABLE_FEE -> Void(discriminant)
        else -> throw IllegalArgumentException("Unknown ExtendFootprintTTLResultXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
      is Void -> {}
    }
  }
}
