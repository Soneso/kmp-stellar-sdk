// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union switch (SCPStatementType type)
 *     {
 *     case SCP_ST_PREPARE:
 *         struct
 *         {
 *             Hash quorumSetHash;       // D
 *             SCPBallot ballot;         // b
 *             SCPBallot* prepared;      // p
 *             SCPBallot* preparedPrime; // p'
 *             uint32 nC;                // c.n
 *             uint32 nH;                // h.n
 *         } prepare;
 *     case SCP_ST_CONFIRM:
 *         struct
 *         {
 *             SCPBallot ballot;   // b
 *             uint32 nPrepared;   // p.n
 *             uint32 nCommit;     // c.n
 *             uint32 nH;          // h.n
 *             Hash quorumSetHash; // D
 *         } confirm;
 *     case SCP_ST_EXTERNALIZE:
 *         struct
 *         {
 *             SCPBallot commit;         // c
 *             uint32 nH;                // h.n
 *             Hash commitQuorumSetHash; // D used before EXTERNALIZE
 *         } externalize;
 *     case SCP_ST_NOMINATE:
 *         SCPNomination nominate;
 *     }
 */
sealed class SCPStatementPledgesXdr {
  abstract val discriminant: SCPStatementTypeXdr

  data class Prepare(
    val value: SCPStatementPrepareXdr
  ) : SCPStatementPledgesXdr() {
    override val discriminant: SCPStatementTypeXdr = SCPStatementTypeXdr.SCP_ST_PREPARE
  }

  data class Confirm(
    val value: SCPStatementConfirmXdr
  ) : SCPStatementPledgesXdr() {
    override val discriminant: SCPStatementTypeXdr = SCPStatementTypeXdr.SCP_ST_CONFIRM
  }

  data class Externalize(
    val value: SCPStatementExternalizeXdr
  ) : SCPStatementPledgesXdr() {
    override val discriminant: SCPStatementTypeXdr = SCPStatementTypeXdr.SCP_ST_EXTERNALIZE
  }

  data class Nominate(
    val value: SCPNominationXdr
  ) : SCPStatementPledgesXdr() {
    override val discriminant: SCPStatementTypeXdr = SCPStatementTypeXdr.SCP_ST_NOMINATE
  }

  companion object {

    fun decode(reader: XdrReader): SCPStatementPledgesXdr {
      val discriminant = SCPStatementTypeXdr.decode(reader)
      return when (discriminant) {
        SCPStatementTypeXdr.SCP_ST_PREPARE -> {
          val value = SCPStatementPrepareXdr.decode(reader)
          Prepare(value)
        }
        SCPStatementTypeXdr.SCP_ST_CONFIRM -> {
          val value = SCPStatementConfirmXdr.decode(reader)
          Confirm(value)
        }
        SCPStatementTypeXdr.SCP_ST_EXTERNALIZE -> {
          val value = SCPStatementExternalizeXdr.decode(reader)
          Externalize(value)
        }
        SCPStatementTypeXdr.SCP_ST_NOMINATE -> {
          val value = SCPNominationXdr.decode(reader)
          Nominate(value)
        }
        else -> throw IllegalArgumentException("Unknown SCPStatementPledgesXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Prepare -> {
        value.encode(writer)
      }
      is Confirm -> {
        value.encode(writer)
      }
      is Externalize -> {
        value.encode(writer)
      }
      is Nominate -> {
        value.encode(writer)
      }
    }
  }
}
