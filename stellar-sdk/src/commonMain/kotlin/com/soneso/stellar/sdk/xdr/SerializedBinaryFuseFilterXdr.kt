// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * struct SerializedBinaryFuseFilter
 * {
 *     BinaryFuseFilterType type;
 * 
 *     // Seed used to hash input to filter
 *     ShortHashSeed inputHashSeed;
 * 
 *     // Seed used for internal filter hash operations
 *     ShortHashSeed filterSeed;
 *     uint32 segmentLength;
 *     uint32 segementLengthMask;
 *     uint32 segmentCount;
 *     uint32 segmentCountLength;
 *     uint32 fingerprintLength; // Length in terms of element count, not bytes
 * 
 *     // Array of uint8_t, uint16_t, or uint32_t depending on filter type
 *     opaque fingerprints<>;
 * };
 */
data class SerializedBinaryFuseFilterXdr(
  val type: BinaryFuseFilterTypeXdr,
  /** Seed used to hash input to filter */
  val inputHashSeed: ShortHashSeedXdr,
  /** Seed used for internal filter hash operations */
  val filterSeed: ShortHashSeedXdr,
  val segmentLength: Uint32Xdr,
  val segementLengthMask: Uint32Xdr,
  val segmentCount: Uint32Xdr,
  val segmentCountLength: Uint32Xdr,
  /** Length in terms of element count, not bytes */
  val fingerprintLength: Uint32Xdr,
  val fingerprints: ByteArray
) {
  companion object {

    fun decode(reader: XdrReader): SerializedBinaryFuseFilterXdr {
      val type = BinaryFuseFilterTypeXdr.decode(reader)
      val inputHashSeed = ShortHashSeedXdr.decode(reader)
      val filterSeed = ShortHashSeedXdr.decode(reader)
      val segmentLength = Uint32Xdr.decode(reader)
      val segementLengthMask = Uint32Xdr.decode(reader)
      val segmentCount = Uint32Xdr.decode(reader)
      val segmentCountLength = Uint32Xdr.decode(reader)
      val fingerprintLength = Uint32Xdr.decode(reader)
      val fingerprints = reader.readVariableOpaque()
      return SerializedBinaryFuseFilterXdr(type, inputHashSeed, filterSeed, segmentLength, segementLengthMask, segmentCount, segmentCountLength, fingerprintLength, fingerprints)
    }
  }

  fun encode(writer: XdrWriter) {
    type.encode(writer)
    inputHashSeed.encode(writer)
    filterSeed.encode(writer)
    segmentLength.encode(writer)
    segementLengthMask.encode(writer)
    segmentCount.encode(writer)
    segmentCountLength.encode(writer)
    fingerprintLength.encode(writer)
    writer.writeVariableOpaque(fingerprints)
  }
}
