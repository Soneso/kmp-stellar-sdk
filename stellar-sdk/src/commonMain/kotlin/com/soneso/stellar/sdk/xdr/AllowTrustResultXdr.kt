// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union AllowTrustResult switch (AllowTrustResultCode code)
 * {
 * case ALLOW_TRUST_SUCCESS:
 *     void;
 * case ALLOW_TRUST_MALFORMED:
 * case ALLOW_TRUST_NO_TRUST_LINE:
 * case ALLOW_TRUST_TRUST_NOT_REQUIRED:
 * case ALLOW_TRUST_CANT_REVOKE:
 * case ALLOW_TRUST_SELF_NOT_ALLOWED:
 * case ALLOW_TRUST_LOW_RESERVE:
 *     void;
 * };
 */
sealed class AllowTrustResultXdr {
  abstract val discriminant: AllowTrustResultCodeXdr

  data class Void(
    override val discriminant: AllowTrustResultCodeXdr
  ) : AllowTrustResultXdr()

  companion object {

    fun decode(reader: XdrReader): AllowTrustResultXdr {
      val discriminant = AllowTrustResultCodeXdr.decode(reader)
      return when (discriminant) {
        AllowTrustResultCodeXdr.ALLOW_TRUST_SUCCESS -> Void(discriminant)
        AllowTrustResultCodeXdr.ALLOW_TRUST_MALFORMED -> Void(discriminant)
        AllowTrustResultCodeXdr.ALLOW_TRUST_NO_TRUST_LINE -> Void(discriminant)
        AllowTrustResultCodeXdr.ALLOW_TRUST_TRUST_NOT_REQUIRED -> Void(discriminant)
        AllowTrustResultCodeXdr.ALLOW_TRUST_CANT_REVOKE -> Void(discriminant)
        AllowTrustResultCodeXdr.ALLOW_TRUST_SELF_NOT_ALLOWED -> Void(discriminant)
        AllowTrustResultCodeXdr.ALLOW_TRUST_LOW_RESERVE -> Void(discriminant)
        else -> throw IllegalArgumentException("Unknown AllowTrustResultXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
    }
  }
}
