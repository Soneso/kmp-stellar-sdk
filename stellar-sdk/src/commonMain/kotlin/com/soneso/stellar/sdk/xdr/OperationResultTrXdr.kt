// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union switch (OperationType type)
 *     {
 *     case CREATE_ACCOUNT:
 *         CreateAccountResult createAccountResult;
 *     case PAYMENT:
 *         PaymentResult paymentResult;
 *     case PATH_PAYMENT_STRICT_RECEIVE:
 *         PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult;
 *     case MANAGE_SELL_OFFER:
 *         ManageSellOfferResult manageSellOfferResult;
 *     case CREATE_PASSIVE_SELL_OFFER:
 *         ManageSellOfferResult createPassiveSellOfferResult;
 *     case SET_OPTIONS:
 *         SetOptionsResult setOptionsResult;
 *     case CHANGE_TRUST:
 *         ChangeTrustResult changeTrustResult;
 *     case ALLOW_TRUST:
 *         AllowTrustResult allowTrustResult;
 *     case ACCOUNT_MERGE:
 *         AccountMergeResult accountMergeResult;
 *     case INFLATION:
 *         InflationResult inflationResult;
 *     case MANAGE_DATA:
 *         ManageDataResult manageDataResult;
 *     case BUMP_SEQUENCE:
 *         BumpSequenceResult bumpSeqResult;
 *     case MANAGE_BUY_OFFER:
 *         ManageBuyOfferResult manageBuyOfferResult;
 *     case PATH_PAYMENT_STRICT_SEND:
 *         PathPaymentStrictSendResult pathPaymentStrictSendResult;
 *     case CREATE_CLAIMABLE_BALANCE:
 *         CreateClaimableBalanceResult createClaimableBalanceResult;
 *     case CLAIM_CLAIMABLE_BALANCE:
 *         ClaimClaimableBalanceResult claimClaimableBalanceResult;
 *     case BEGIN_SPONSORING_FUTURE_RESERVES:
 *         BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult;
 *     case END_SPONSORING_FUTURE_RESERVES:
 *         EndSponsoringFutureReservesResult endSponsoringFutureReservesResult;
 *     case REVOKE_SPONSORSHIP:
 *         RevokeSponsorshipResult revokeSponsorshipResult;
 *     case CLAWBACK:
 *         ClawbackResult clawbackResult;
 *     case CLAWBACK_CLAIMABLE_BALANCE:
 *         ClawbackClaimableBalanceResult clawbackClaimableBalanceResult;
 *     case SET_TRUST_LINE_FLAGS:
 *         SetTrustLineFlagsResult setTrustLineFlagsResult;
 *     case LIQUIDITY_POOL_DEPOSIT:
 *         LiquidityPoolDepositResult liquidityPoolDepositResult;
 *     case LIQUIDITY_POOL_WITHDRAW:
 *         LiquidityPoolWithdrawResult liquidityPoolWithdrawResult;
 *     case INVOKE_HOST_FUNCTION:
 *         InvokeHostFunctionResult invokeHostFunctionResult;
 *     case EXTEND_FOOTPRINT_TTL:
 *         ExtendFootprintTTLResult extendFootprintTTLResult;
 *     case RESTORE_FOOTPRINT:
 *         RestoreFootprintResult restoreFootprintResult;
 *     }
 */
sealed class OperationResultTrXdr {
  abstract val discriminant: OperationTypeXdr

  data class CreateAccountResult(
    val value: CreateAccountResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.CREATE_ACCOUNT
  }

  data class PaymentResult(
    val value: PaymentResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.PAYMENT
  }

  data class PathPaymentStrictReceiveResult(
    val value: PathPaymentStrictReceiveResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.PATH_PAYMENT_STRICT_RECEIVE
  }

  data class ManageSellOfferResult(
    val value: ManageSellOfferResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.MANAGE_SELL_OFFER
  }

  data class CreatePassiveSellOfferResult(
    val value: ManageSellOfferResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.CREATE_PASSIVE_SELL_OFFER
  }

  data class SetOptionsResult(
    val value: SetOptionsResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.SET_OPTIONS
  }

  data class ChangeTrustResult(
    val value: ChangeTrustResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.CHANGE_TRUST
  }

  data class AllowTrustResult(
    val value: AllowTrustResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.ALLOW_TRUST
  }

  data class AccountMergeResult(
    val value: AccountMergeResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.ACCOUNT_MERGE
  }

  data class InflationResult(
    val value: InflationResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.INFLATION
  }

  data class ManageDataResult(
    val value: ManageDataResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.MANAGE_DATA
  }

  data class BumpSeqResult(
    val value: BumpSequenceResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.BUMP_SEQUENCE
  }

  data class ManageBuyOfferResult(
    val value: ManageBuyOfferResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.MANAGE_BUY_OFFER
  }

  data class PathPaymentStrictSendResult(
    val value: PathPaymentStrictSendResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.PATH_PAYMENT_STRICT_SEND
  }

  data class CreateClaimableBalanceResult(
    val value: CreateClaimableBalanceResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.CREATE_CLAIMABLE_BALANCE
  }

  data class ClaimClaimableBalanceResult(
    val value: ClaimClaimableBalanceResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.CLAIM_CLAIMABLE_BALANCE
  }

  data class BeginSponsoringFutureReservesResult(
    val value: BeginSponsoringFutureReservesResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.BEGIN_SPONSORING_FUTURE_RESERVES
  }

  data class EndSponsoringFutureReservesResult(
    val value: EndSponsoringFutureReservesResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.END_SPONSORING_FUTURE_RESERVES
  }

  data class RevokeSponsorshipResult(
    val value: RevokeSponsorshipResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.REVOKE_SPONSORSHIP
  }

  data class ClawbackResult(
    val value: ClawbackResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.CLAWBACK
  }

  data class ClawbackClaimableBalanceResult(
    val value: ClawbackClaimableBalanceResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.CLAWBACK_CLAIMABLE_BALANCE
  }

  data class SetTrustLineFlagsResult(
    val value: SetTrustLineFlagsResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.SET_TRUST_LINE_FLAGS
  }

  data class LiquidityPoolDepositResult(
    val value: LiquidityPoolDepositResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.LIQUIDITY_POOL_DEPOSIT
  }

  data class LiquidityPoolWithdrawResult(
    val value: LiquidityPoolWithdrawResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.LIQUIDITY_POOL_WITHDRAW
  }

  data class InvokeHostFunctionResult(
    val value: InvokeHostFunctionResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.INVOKE_HOST_FUNCTION
  }

  data class ExtendFootprintTTLResult(
    val value: ExtendFootprintTTLResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.EXTEND_FOOTPRINT_TTL
  }

  data class RestoreFootprintResult(
    val value: RestoreFootprintResultXdr
  ) : OperationResultTrXdr() {
    override val discriminant: OperationTypeXdr = OperationTypeXdr.RESTORE_FOOTPRINT
  }

  companion object {

    fun decode(reader: XdrReader): OperationResultTrXdr {
      val discriminant = OperationTypeXdr.decode(reader)
      return when (discriminant) {
        OperationTypeXdr.CREATE_ACCOUNT -> {
          val value = CreateAccountResultXdr.decode(reader)
          CreateAccountResult(value)
        }
        OperationTypeXdr.PAYMENT -> {
          val value = PaymentResultXdr.decode(reader)
          PaymentResult(value)
        }
        OperationTypeXdr.PATH_PAYMENT_STRICT_RECEIVE -> {
          val value = PathPaymentStrictReceiveResultXdr.decode(reader)
          PathPaymentStrictReceiveResult(value)
        }
        OperationTypeXdr.MANAGE_SELL_OFFER -> {
          val value = ManageSellOfferResultXdr.decode(reader)
          ManageSellOfferResult(value)
        }
        OperationTypeXdr.CREATE_PASSIVE_SELL_OFFER -> {
          val value = ManageSellOfferResultXdr.decode(reader)
          CreatePassiveSellOfferResult(value)
        }
        OperationTypeXdr.SET_OPTIONS -> {
          val value = SetOptionsResultXdr.decode(reader)
          SetOptionsResult(value)
        }
        OperationTypeXdr.CHANGE_TRUST -> {
          val value = ChangeTrustResultXdr.decode(reader)
          ChangeTrustResult(value)
        }
        OperationTypeXdr.ALLOW_TRUST -> {
          val value = AllowTrustResultXdr.decode(reader)
          AllowTrustResult(value)
        }
        OperationTypeXdr.ACCOUNT_MERGE -> {
          val value = AccountMergeResultXdr.decode(reader)
          AccountMergeResult(value)
        }
        OperationTypeXdr.INFLATION -> {
          val value = InflationResultXdr.decode(reader)
          InflationResult(value)
        }
        OperationTypeXdr.MANAGE_DATA -> {
          val value = ManageDataResultXdr.decode(reader)
          ManageDataResult(value)
        }
        OperationTypeXdr.BUMP_SEQUENCE -> {
          val value = BumpSequenceResultXdr.decode(reader)
          BumpSeqResult(value)
        }
        OperationTypeXdr.MANAGE_BUY_OFFER -> {
          val value = ManageBuyOfferResultXdr.decode(reader)
          ManageBuyOfferResult(value)
        }
        OperationTypeXdr.PATH_PAYMENT_STRICT_SEND -> {
          val value = PathPaymentStrictSendResultXdr.decode(reader)
          PathPaymentStrictSendResult(value)
        }
        OperationTypeXdr.CREATE_CLAIMABLE_BALANCE -> {
          val value = CreateClaimableBalanceResultXdr.decode(reader)
          CreateClaimableBalanceResult(value)
        }
        OperationTypeXdr.CLAIM_CLAIMABLE_BALANCE -> {
          val value = ClaimClaimableBalanceResultXdr.decode(reader)
          ClaimClaimableBalanceResult(value)
        }
        OperationTypeXdr.BEGIN_SPONSORING_FUTURE_RESERVES -> {
          val value = BeginSponsoringFutureReservesResultXdr.decode(reader)
          BeginSponsoringFutureReservesResult(value)
        }
        OperationTypeXdr.END_SPONSORING_FUTURE_RESERVES -> {
          val value = EndSponsoringFutureReservesResultXdr.decode(reader)
          EndSponsoringFutureReservesResult(value)
        }
        OperationTypeXdr.REVOKE_SPONSORSHIP -> {
          val value = RevokeSponsorshipResultXdr.decode(reader)
          RevokeSponsorshipResult(value)
        }
        OperationTypeXdr.CLAWBACK -> {
          val value = ClawbackResultXdr.decode(reader)
          ClawbackResult(value)
        }
        OperationTypeXdr.CLAWBACK_CLAIMABLE_BALANCE -> {
          val value = ClawbackClaimableBalanceResultXdr.decode(reader)
          ClawbackClaimableBalanceResult(value)
        }
        OperationTypeXdr.SET_TRUST_LINE_FLAGS -> {
          val value = SetTrustLineFlagsResultXdr.decode(reader)
          SetTrustLineFlagsResult(value)
        }
        OperationTypeXdr.LIQUIDITY_POOL_DEPOSIT -> {
          val value = LiquidityPoolDepositResultXdr.decode(reader)
          LiquidityPoolDepositResult(value)
        }
        OperationTypeXdr.LIQUIDITY_POOL_WITHDRAW -> {
          val value = LiquidityPoolWithdrawResultXdr.decode(reader)
          LiquidityPoolWithdrawResult(value)
        }
        OperationTypeXdr.INVOKE_HOST_FUNCTION -> {
          val value = InvokeHostFunctionResultXdr.decode(reader)
          InvokeHostFunctionResult(value)
        }
        OperationTypeXdr.EXTEND_FOOTPRINT_TTL -> {
          val value = ExtendFootprintTTLResultXdr.decode(reader)
          ExtendFootprintTTLResult(value)
        }
        OperationTypeXdr.RESTORE_FOOTPRINT -> {
          val value = RestoreFootprintResultXdr.decode(reader)
          RestoreFootprintResult(value)
        }
        else -> throw IllegalArgumentException("Unknown OperationResultTrXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is CreateAccountResult -> {
        value.encode(writer)
      }
      is PaymentResult -> {
        value.encode(writer)
      }
      is PathPaymentStrictReceiveResult -> {
        value.encode(writer)
      }
      is ManageSellOfferResult -> {
        value.encode(writer)
      }
      is CreatePassiveSellOfferResult -> {
        value.encode(writer)
      }
      is SetOptionsResult -> {
        value.encode(writer)
      }
      is ChangeTrustResult -> {
        value.encode(writer)
      }
      is AllowTrustResult -> {
        value.encode(writer)
      }
      is AccountMergeResult -> {
        value.encode(writer)
      }
      is InflationResult -> {
        value.encode(writer)
      }
      is ManageDataResult -> {
        value.encode(writer)
      }
      is BumpSeqResult -> {
        value.encode(writer)
      }
      is ManageBuyOfferResult -> {
        value.encode(writer)
      }
      is PathPaymentStrictSendResult -> {
        value.encode(writer)
      }
      is CreateClaimableBalanceResult -> {
        value.encode(writer)
      }
      is ClaimClaimableBalanceResult -> {
        value.encode(writer)
      }
      is BeginSponsoringFutureReservesResult -> {
        value.encode(writer)
      }
      is EndSponsoringFutureReservesResult -> {
        value.encode(writer)
      }
      is RevokeSponsorshipResult -> {
        value.encode(writer)
      }
      is ClawbackResult -> {
        value.encode(writer)
      }
      is ClawbackClaimableBalanceResult -> {
        value.encode(writer)
      }
      is SetTrustLineFlagsResult -> {
        value.encode(writer)
      }
      is LiquidityPoolDepositResult -> {
        value.encode(writer)
      }
      is LiquidityPoolWithdrawResult -> {
        value.encode(writer)
      }
      is InvokeHostFunctionResult -> {
        value.encode(writer)
      }
      is ExtendFootprintTTLResult -> {
        value.encode(writer)
      }
      is RestoreFootprintResult -> {
        value.encode(writer)
      }
    }
  }
}
