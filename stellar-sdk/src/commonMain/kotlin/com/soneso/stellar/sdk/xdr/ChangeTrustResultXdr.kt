// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union ChangeTrustResult switch (ChangeTrustResultCode code)
 * {
 * case CHANGE_TRUST_SUCCESS:
 *     void;
 * case CHANGE_TRUST_MALFORMED:
 * case CHANGE_TRUST_NO_ISSUER:
 * case CHANGE_TRUST_INVALID_LIMIT:
 * case CHANGE_TRUST_LOW_RESERVE:
 * case CHANGE_TRUST_SELF_NOT_ALLOWED:
 * case CHANGE_TRUST_TRUST_LINE_MISSING:
 * case CHANGE_TRUST_CANNOT_DELETE:
 * case CHANGE_TRUST_NOT_AUTH_MAINTAIN_LIABILITIES:
 *     void;
 * };
 */
sealed class ChangeTrustResultXdr {
  abstract val discriminant: ChangeTrustResultCodeXdr

  data class Void(
    override val discriminant: ChangeTrustResultCodeXdr
  ) : ChangeTrustResultXdr()

  companion object {

    fun decode(reader: XdrReader): ChangeTrustResultXdr {
      val discriminant = ChangeTrustResultCodeXdr.decode(reader)
      return when (discriminant) {
        ChangeTrustResultCodeXdr.CHANGE_TRUST_SUCCESS -> Void(discriminant)
        ChangeTrustResultCodeXdr.CHANGE_TRUST_MALFORMED -> Void(discriminant)
        ChangeTrustResultCodeXdr.CHANGE_TRUST_NO_ISSUER -> Void(discriminant)
        ChangeTrustResultCodeXdr.CHANGE_TRUST_INVALID_LIMIT -> Void(discriminant)
        ChangeTrustResultCodeXdr.CHANGE_TRUST_LOW_RESERVE -> Void(discriminant)
        ChangeTrustResultCodeXdr.CHANGE_TRUST_SELF_NOT_ALLOWED -> Void(discriminant)
        ChangeTrustResultCodeXdr.CHANGE_TRUST_TRUST_LINE_MISSING -> Void(discriminant)
        ChangeTrustResultCodeXdr.CHANGE_TRUST_CANNOT_DELETE -> Void(discriminant)
        ChangeTrustResultCodeXdr.CHANGE_TRUST_NOT_AUTH_MAINTAIN_LIABILITIES -> Void(discriminant)
        else -> throw IllegalArgumentException("Unknown ChangeTrustResultXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
    }
  }
}
