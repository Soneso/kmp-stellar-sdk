// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union LedgerUpgrade switch (LedgerUpgradeType type)
 * {
 * case LEDGER_UPGRADE_VERSION:
 *     uint32 newLedgerVersion; // update ledgerVersion
 * case LEDGER_UPGRADE_BASE_FEE:
 *     uint32 newBaseFee; // update baseFee
 * case LEDGER_UPGRADE_MAX_TX_SET_SIZE:
 *     uint32 newMaxTxSetSize; // update maxTxSetSize
 * case LEDGER_UPGRADE_BASE_RESERVE:
 *     uint32 newBaseReserve; // update baseReserve
 * case LEDGER_UPGRADE_FLAGS:
 *     uint32 newFlags; // update flags
 * case LEDGER_UPGRADE_CONFIG:
 *     // Update arbitrary `ConfigSetting` entries identified by the key.
 *     ConfigUpgradeSetKey newConfig;
 * case LEDGER_UPGRADE_MAX_SOROBAN_TX_SET_SIZE:
 *     // Update ConfigSettingContractExecutionLanesV0.ledgerMaxTxCount without
 *     // using `LEDGER_UPGRADE_CONFIG`.
 *     uint32 newMaxSorobanTxSetSize;
 * };
 */
sealed class LedgerUpgradeXdr {
  abstract val discriminant: LedgerUpgradeTypeXdr

  data class NewLedgerVersion(
    val value: Uint32Xdr
  ) : LedgerUpgradeXdr() {
    override val discriminant: LedgerUpgradeTypeXdr = LedgerUpgradeTypeXdr.LEDGER_UPGRADE_VERSION
  }

  data class NewBaseFee(
    val value: Uint32Xdr
  ) : LedgerUpgradeXdr() {
    override val discriminant: LedgerUpgradeTypeXdr = LedgerUpgradeTypeXdr.LEDGER_UPGRADE_BASE_FEE
  }

  data class NewMaxTxSetSize(
    val value: Uint32Xdr
  ) : LedgerUpgradeXdr() {
    override val discriminant: LedgerUpgradeTypeXdr = LedgerUpgradeTypeXdr.LEDGER_UPGRADE_MAX_TX_SET_SIZE
  }

  data class NewBaseReserve(
    val value: Uint32Xdr
  ) : LedgerUpgradeXdr() {
    override val discriminant: LedgerUpgradeTypeXdr = LedgerUpgradeTypeXdr.LEDGER_UPGRADE_BASE_RESERVE
  }

  data class NewFlags(
    val value: Uint32Xdr
  ) : LedgerUpgradeXdr() {
    override val discriminant: LedgerUpgradeTypeXdr = LedgerUpgradeTypeXdr.LEDGER_UPGRADE_FLAGS
  }

  /** Update arbitrary `ConfigSetting` entries identified by the key. */
  data class NewConfig(
    val value: ConfigUpgradeSetKeyXdr
  ) : LedgerUpgradeXdr() {
    override val discriminant: LedgerUpgradeTypeXdr = LedgerUpgradeTypeXdr.LEDGER_UPGRADE_CONFIG
  }

  /** Update ConfigSettingContractExecutionLanesV0.ledgerMaxTxCount without */
  data class NewMaxSorobanTxSetSize(
    val value: Uint32Xdr
  ) : LedgerUpgradeXdr() {
    override val discriminant: LedgerUpgradeTypeXdr = LedgerUpgradeTypeXdr.LEDGER_UPGRADE_MAX_SOROBAN_TX_SET_SIZE
  }

  companion object {

    fun decode(reader: XdrReader): LedgerUpgradeXdr {
      val discriminant = LedgerUpgradeTypeXdr.decode(reader)
      return when (discriminant) {
        LedgerUpgradeTypeXdr.LEDGER_UPGRADE_VERSION -> {
          val value = Uint32Xdr.decode(reader)
          NewLedgerVersion(value)
        }
        LedgerUpgradeTypeXdr.LEDGER_UPGRADE_BASE_FEE -> {
          val value = Uint32Xdr.decode(reader)
          NewBaseFee(value)
        }
        LedgerUpgradeTypeXdr.LEDGER_UPGRADE_MAX_TX_SET_SIZE -> {
          val value = Uint32Xdr.decode(reader)
          NewMaxTxSetSize(value)
        }
        LedgerUpgradeTypeXdr.LEDGER_UPGRADE_BASE_RESERVE -> {
          val value = Uint32Xdr.decode(reader)
          NewBaseReserve(value)
        }
        LedgerUpgradeTypeXdr.LEDGER_UPGRADE_FLAGS -> {
          val value = Uint32Xdr.decode(reader)
          NewFlags(value)
        }
        LedgerUpgradeTypeXdr.LEDGER_UPGRADE_CONFIG -> {
          val value = ConfigUpgradeSetKeyXdr.decode(reader)
          NewConfig(value)
        }
        LedgerUpgradeTypeXdr.LEDGER_UPGRADE_MAX_SOROBAN_TX_SET_SIZE -> {
          val value = Uint32Xdr.decode(reader)
          NewMaxSorobanTxSetSize(value)
        }
        else -> throw IllegalArgumentException("Unknown LedgerUpgradeXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is NewLedgerVersion -> {
        value.encode(writer)
      }
      is NewBaseFee -> {
        value.encode(writer)
      }
      is NewMaxTxSetSize -> {
        value.encode(writer)
      }
      is NewBaseReserve -> {
        value.encode(writer)
      }
      is NewFlags -> {
        value.encode(writer)
      }
      is NewConfig -> {
        value.encode(writer)
      }
      is NewMaxSorobanTxSetSize -> {
        value.encode(writer)
      }
    }
  }
}
