// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union ContractIDPreimage switch (ContractIDPreimageType type)
 * {
 * case CONTRACT_ID_PREIMAGE_FROM_ADDRESS:
 *     struct
 *     {
 *         SCAddress address;
 *         uint256 salt;
 *     } fromAddress;
 * case CONTRACT_ID_PREIMAGE_FROM_ASSET:
 *     Asset fromAsset;
 * };
 */
sealed class ContractIDPreimageXdr {
  abstract val discriminant: ContractIDPreimageTypeXdr

  data class FromAddress(
    val value: ContractIDPreimageFromAddressXdr
  ) : ContractIDPreimageXdr() {
    override val discriminant: ContractIDPreimageTypeXdr = ContractIDPreimageTypeXdr.CONTRACT_ID_PREIMAGE_FROM_ADDRESS
  }

  data class FromAsset(
    val value: AssetXdr
  ) : ContractIDPreimageXdr() {
    override val discriminant: ContractIDPreimageTypeXdr = ContractIDPreimageTypeXdr.CONTRACT_ID_PREIMAGE_FROM_ASSET
  }

  companion object {

    fun decode(reader: XdrReader): ContractIDPreimageXdr {
      val discriminant = ContractIDPreimageTypeXdr.decode(reader)
      return when (discriminant) {
        ContractIDPreimageTypeXdr.CONTRACT_ID_PREIMAGE_FROM_ADDRESS -> {
          val value = ContractIDPreimageFromAddressXdr.decode(reader)
          FromAddress(value)
        }
        ContractIDPreimageTypeXdr.CONTRACT_ID_PREIMAGE_FROM_ASSET -> {
          val value = AssetXdr.decode(reader)
          FromAsset(value)
        }
        else -> throw IllegalArgumentException("Unknown ContractIDPreimageXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is FromAddress -> {
        value.encode(writer)
      }
      is FromAsset -> {
        value.encode(writer)
      }
    }
  }
}
