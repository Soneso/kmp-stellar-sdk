// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package com.soneso.stellar.sdk.xdr

/**
 * XDR Source:
 * union BeginSponsoringFutureReservesResult switch (
 *     BeginSponsoringFutureReservesResultCode code)
 * {
 * case BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS:
 *     void;
 * case BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED:
 * case BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED:
 * case BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE:
 *     void;
 * };
 */
sealed class BeginSponsoringFutureReservesResultXdr {
  abstract val discriminant: BeginSponsoringFutureReservesResultCodeXdr

  data class Void(
    override val discriminant: BeginSponsoringFutureReservesResultCodeXdr
  ) : BeginSponsoringFutureReservesResultXdr()

  companion object {

    fun decode(reader: XdrReader): BeginSponsoringFutureReservesResultXdr {
      val discriminant = BeginSponsoringFutureReservesResultCodeXdr.decode(reader)
      return when (discriminant) {
        BeginSponsoringFutureReservesResultCodeXdr.BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS -> Void(discriminant)
        BeginSponsoringFutureReservesResultCodeXdr.BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED -> Void(discriminant)
        BeginSponsoringFutureReservesResultCodeXdr.BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED -> Void(discriminant)
        BeginSponsoringFutureReservesResultCodeXdr.BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE -> Void(discriminant)
        else -> throw IllegalArgumentException("Unknown BeginSponsoringFutureReservesResultXdr discriminant: $discriminant")
      }
    }
  }

  fun encode(writer: XdrWriter) {
    discriminant.encode(writer)
    when (this) {
      is Void -> {}
      is Void -> {}
    }
  }
}
